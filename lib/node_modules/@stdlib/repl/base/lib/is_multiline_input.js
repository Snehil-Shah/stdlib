/**
* @license Apache-2.0
*
* Copyright (c) 2025 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-invalid-this */

'use strict';

// MODULES //

var Parser = require( 'acorn' ).Parser;
var parseLoose = require( 'acorn-loose' ).parse;
var logger = require( 'debug' );
var multilinePlugin = require( './acorn_detect_multiline_input.js' );


// VARIABLES //

var debug = logger( 'repl:is-multiline-input' );
var hasMultilineError = Parser.extend( multilinePlugin ).hasMultilineError;
var RE_WHITESPACE = /^\s*$/;
var RE_SINGLE_LINE_COMMENT = /^\s*\/\//;
var RE_MULTI_LINE_COMMENT = /^\s*\/\*.*\*\/$/;
var AOPTS = {
	'ecmaVersion': 'latest'
};


// MAIN //

/**
* Checks if the given input is a possible multi-line command.
*
* @private
* @param {string} input - input command
* @returns {boolean} boolean indicating whether the given input is a possible multi-line command
*/
function isMultilineInput( input ) {
	var node;
	var tmp;
	var ast;

	debug( 'Attempting to detect multi-line input...' );
	if ( RE_WHITESPACE.test( input ) ) {
		debug( 'Multi-line input not detected.' );
		return false;
	}
	if ( RE_SINGLE_LINE_COMMENT.test( input ) || RE_MULTI_LINE_COMMENT.test( input ) ) { // eslint-disable-line max-len
		debug( 'Multi-line input not detected.' );
		return false;
	}
	// Check if the command has valid syntax...
	tmp = this._processCommand( input );
	if ( !( tmp instanceof Error ) ) {
		debug( 'Multi-line input not detected.' );
		return false;
	}
	if ( hasMultilineError( input, AOPTS ) ) {
		debug( 'Detected multi-line input. Triggering multi-line mode...' );
		return true;
	}
	// Still possible that a user is attempting to enter an object literal across multiple lines...
	ast = parseLoose( input, AOPTS );

	// Check for a trailing node which is being interpreted as a block statement, as this could be an object literal...
	node = ast.body[ ast.body.length-1 ];
	if ( node.type === 'BlockStatement' && node.end === ast.end ) {
		tmp = input.slice( node.start, node.end );
		if ( hasMultilineError( tmp, AOPTS ) ) {
			debug( 'Detected multi-line input. Triggering multi-line mode...' );
			return true;
		}
	}
	debug( 'Multi-line input not detected.' );
	return false;
}


// EXPORTS //

module.exports = isMultilineInput;
