/**
* @license Apache-2.0
*
* Copyright (c) 2025 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-underscore-dangle */

'use strict';

// MODULES //

var logger = require( 'debug' );
var drain = require( './drain.js' );


// VARIABLES //

var debug = logger( 'repl:process-command' );
var RE_WHITESPACE = /^\s*$/;
var RE_SINGLE_LINE_COMMENT = /^\s*\/\//;
var RE_MULTI_LINE_COMMENT = /^\s*\/\*.*\*\/$/;


// MAIN //

/**
* Processes input command.
*
* @private
* @param {REPL} repl - REPL instance
* @param {string} input - input command
* @returns {void}
*/
function processInput( repl, input ) {
	var code;
	var tmp;

	if ( RE_WHITESPACE.test( input ) ) {
		return;
	}
	if ( RE_SINGLE_LINE_COMMENT.test( input ) || RE_MULTI_LINE_COMMENT.test( input ) ) { // eslint-disable-line max-len
		debug( 'Detected single-line comment.' );
		tmp = input;
	} else {
		// Check if the command has valid syntax...
		debug( 'Processing command...' );
		tmp = repl._processCommand( input );
		if ( tmp instanceof Error ) {
			repl.emit( 'command', input, false, tmp, false ); // command failed
			return;
		}
	}
	debug( 'Successfully processed command.' );

	// Attempt to compile the command:
	debug( 'Attempting to compile command...' );
	code = repl._compileCommand( tmp );
	if ( code instanceof Error ) {
		debug( 'Error: %s', code.message );
		repl.emit( 'command', input, false, code, false ); // command failed
		return;
	}
	debug( 'Successfully compiled command.' );
	code.raw = input;

	// Add the command to the command queue:
	repl._queue.push( code );

	// Request to run the command:
	drain( repl );
}


// EXPORTS //

module.exports = processInput;
