/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isPlainObject = require( '@stdlib/assert/is-plain-object' );
var isObjectArray = require( '@stdlib/assert/is-object-array' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var format = require( '@stdlib/string/format' );


// VARIABLES //

var ACTIONS = [
	'moveRight',
	'moveLeft',
	'moveWordRight',
	'moveWordLeft',
	'moveBeginning',
	'moveEnd',
	'tab',
	'indentLineRight',
	'indentLineLeft',
	'deleteLeft',
	'deleteRight',
	'deleteWordLeft',
	'deleteWordRight',
	'deleteLineLeft',
	'deleteLineRight',
	'yankKilled',
	'yankPop',
	'undo',
	'redo',
	'transposeAboutCursor',
	'uppercaseNextWord',
	'capitalizeNextWord',
	'lowercaseNextWord',
	'clearScreen'
];


// MAIN //

/**
* Validates keybindings.
*
* @private
* @param {Object} opts - destination object
* @param {Object} options - settings options
* @returns {(Error|null)} error or null
*/
function validate( opts, options ) {
	var i;
	var j;
	if ( !isPlainObject( options ) ) {
		return new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );
	}
	for ( i = 0; i < ACTIONS.length; i++ ) {
		if ( hasOwnProp( options, ACTIONS[ i ] ) ) {
			if ( !isObjectArray( options[ ACTIONS[ i ] ] ) ) {
				return new TypeError( format( 'invalid option. Each action must be an array of objects. Value: `%s`.', options[ ACTIONS[ i ] ] ) );
			}
			opts[ ACTIONS[ i ] ] = [];
			for ( j = 0; j < options[ ACTIONS[ i ] ].length; j++ ) {
				if ( !hasOwnProp( options[ ACTIONS[ i ] ][ j ], 'name' ) ) {
					return new TypeError( format( 'invalid option. Each key object must have a `name` property. Value: `%s`.', options[ ACTIONS[ i ] ][ j ] ) );
				}
				opts[ ACTIONS[ i ] ].push( {
					'name': options[ ACTIONS[ i ] ][ j ].name,
					'ctrl': options[ ACTIONS[ i ] ][ j ].ctrl || false,
					'shift': options[ ACTIONS[ i ] ][ j ].shift || false,
					'meta': options[ ACTIONS[ i ] ][ j ].meta || false
				});
			}
		}
	}
	return null;
}


// EXPORTS //

module.exports = validate;
