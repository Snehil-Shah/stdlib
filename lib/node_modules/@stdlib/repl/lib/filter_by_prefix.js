/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var startsWith = require( '@stdlib/string/starts-with' );
var max = require( '@stdlib/math/base/special/max' );
var abs = require( '@stdlib/math/base/special/abs' );


// FUNCTIONS //

/**
* Checks if the completion is a fuzzy match for the input.
*
* @private
* @param {string} completion - completion string
* @param {string} input - input string
* @returns {boolean} - boolean indicating if a completion is a fuzzy match for the input string
*/
function fuzzyMatch( completion, input ) {
	var charPositions;
	var finalScore;
	var positions;
	var distance;
	var score;
	var index;
	var char;
	var i;
	var j;

	// Return true for perfect prefix
	if ( startsWith( completion, input ) ) {
		return true;
	}

	if ( completion.length >= input.length ) {
		// Preprocess the completion string to get the positions of each character
		positions = {};
		for ( i = 0; i < completion.length; i++ ) {
			char = completion[ i ];
			if (!positions[ char ]) {
				positions[ char] = [];
			}
			positions[ char ].push( i );
		}

		score = 0;
		index = 0;
		for ( i = 0; i < input.length; i++ ) {
			charPositions = positions[ input[ i ] ];
			if ( !charPositions ) {
				continue;
			}

			// Find the next position of the character that is greater than or equal to index
			j = 0;
			while ( j < charPositions.length && charPositions[ j ] < index ) {
				j += 1;
			}
			if ( j === charPositions.length ) {
				continue;
			}

			// Subtract a penalty based on the distance between matching characters
			distance = abs( charPositions[ j ] - i );
			score += max( 0, 1 - ( distance * 0.25 ) );
			index = charPositions[ j ] + 1;
		}

		// Calculate relative score
		finalScore = score / input.length;

		// A score above or equal to 0.7 indicates a match
		return finalScore >= 0.7;
	}

	// Return false for completions smaller than the input
	return false;
}


// MAIN //

/**
* Filters a list of strings based on a provided search string.
*
* @private
* @param {Array} out - output array
* @param {Array} arr - source array
* @param {string} str - string filter
* @returns {Array} output array
*/
function filterByPrefix( out, arr, str ) {
	var i;
	for ( i = 0; i < arr.length; i++ ) {
		if ( fuzzyMatch( arr[ i ], str ) ) {
			out.push( arr[ i ] );
		}
	}
	return out;
}


// EXPORTS //

module.exports = filterByPrefix;
