/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var ctor = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof ctor, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns an empty string if no table data provided ', function test( t ) {
	var table;
	var str;

	table = ctor();

	str = table.render();
	t.strictEqual( str, '', 'returns empty string' );

	t.end();
});

tape( 'the function supports rendering a table', function test( t ) {
	var expected;
	var headers;
	var table;
	var data;
	var str;

	table = ctor();

	data = [ [ 45, 33, 'hello' ], [ 32.54, true, null ] ];
	headers = [ 'col1', 'col2', 'col3' ];
	table.setData( data, headers );

	expected = [
		'┌───────┬──────┬───────┐',
		'│  col1 │ col2 │  col3 │',
		'├───────┼──────┼───────┤',
		'│    45 │   33 │ hello │',
		'│ 32.54 │ true │  null │',
		'└───────┴──────┴───────┘'
	].join( '\n' );

	str = table.render();
	t.strictEqual( str, expected, 'returns rendered table' );

	t.end();
});

tape( 'the function supports rendering a table (without headers)', function test( t ) {
	var expected;
	var table;
	var data;
	var str;

	table = ctor();

	data = [ [ 45, 33, 'hello' ], [ 32.54, true, null ] ];
	table.setData( data );

	expected = [
		'┌───────┬──────┬───────┐',
		'│    45 │   33 │ hello │',
		'│ 32.54 │ true │  null │',
		'└───────┴──────┴───────┘'
	].join( '\n' );

	str = table.render();
	t.strictEqual( str, expected, 'returns rendered table' );

	t.end();
});

tape( 'the function supports rendering a table (with row separators)', function test( t ) {
	var expected;
	var headers;
	var table;
	var data;
	var str;

	table = ctor();

	data = [ [ 45, 33, 'hello' ], [ 32.54, true, null ] ];
	headers = [ 'col1', 'col2', 'col3' ];
	table.setData( data, headers );
	table.rowSeparator = '─';

	expected = [
		'┌───────┬──────┬───────┐',
		'│  col1 │ col2 │  col3 │',
		'├───────┼──────┼───────┤',
		'│    45 │   33 │ hello │',
		'├───────┼──────┼───────┤',
		'│ 32.54 │ true │  null │',
		'└───────┴──────┴───────┘'
	].join( '\n' );

	str = table.render();
	t.strictEqual( str, expected, 'returns rendered table' );

	t.end();
});

tape( 'the function supports rendering a table (without borders)', function test( t ) {
	var expected;
	var headers;
	var table;
	var data;
	var str;

	table = ctor();

	data = [ [ 45, 33, 'hello' ], [ 32.54, true, null ] ];
	headers = [ 'col1', 'col2', 'col3' ];
	table.setData( data, headers );
	table.borders = 'None';

	expected = [
		'  col1 │ col2 │  col3 ',
		'───────┼──────┼───────',
		'    45 │   33 │ hello ',
		' 32.54 │ true │  null '
	].join( '\n' );

	str = table.render();
	t.strictEqual( str, expected, 'returns rendered table' );

	t.end();
});

tape( 'the function supports rendering a table (without column separators)', function test( t ) {
	var expected;
	var headers;
	var table;
	var data;
	var str;

	table = ctor();

	data = [ [ 45, 33, 'hello' ], [ 32.54, true, null ] ];
	headers = [ 'col1', 'col2', 'col3' ];
	table.setData( data, headers );
	table.columnSeparator = 'None';

	expected = [
		'┌────────────────────┐',
		'│  col1  col2   col3 │',
		'├────────────────────┤',
		'│    45    33  hello │',
		'│ 32.54  true   null │',
		'└────────────────────┘'
	].join( '\n' );

	str = table.render();
	t.strictEqual( str, expected, 'returns rendered table' );

	t.end();
});

tape( 'the function supports rendering a table (without header separator)', function test( t ) {
	var expected;
	var headers;
	var table;
	var data;
	var str;

	table = ctor();

	data = [ [ 45, 33, 'hello' ], [ 32.54, true, null ] ];
	headers = [ 'col1', 'col2', 'col3' ];
	table.setData( data, headers );
	table.headerSeparator = 'None';

	expected = [
		'┌───────┬──────┬───────┐',
		'│  col1 │ col2 │  col3 │',
		'│    45 │   33 │ hello │',
		'│ 32.54 │ true │  null │',
		'└───────┴──────┴───────┘'
	].join( '\n' );

	str = table.render();
	t.strictEqual( str, expected, 'returns rendered table' );

	t.end();
});

tape( 'the function supports rendering a table (without corners)', function test( t ) {
	var expected;
	var headers;
	var table;
	var data;
	var str;

	table = ctor();

	data = [ [ 45, 33, 'hello' ], [ 32.54, true, null ] ];
	headers = [ 'col1', 'col2', 'col3' ];
	table.setData( data, headers );
	table.corners = 'None';

	expected = [
		' ───────┬──────┬─────── ',
		'│  col1 │ col2 │  col3 │',
		'├───────┼──────┼───────┤',
		'│    45 │   33 │ hello │',
		'│ 32.54 │ true │  null │',
		' ───────┴──────┴─────── '
	].join( '\n' );

	str = table.render();
	t.strictEqual( str, expected, 'returns rendered table' );

	t.end();
});

tape( 'the function supports rendering a table (without joints)', function test( t ) {
	var expected;
	var headers;
	var table;
	var data;
	var str;

	table = ctor();

	data = [ [ 45, 33, 'hello' ], [ 32.54, true, null ] ];
	headers = [ 'col1', 'col2', 'col3' ];
	table.setData( data, headers );
	table.joints = 'None';

	expected = [
		'┌─────── ────── ───────┐',
		'│  col1 │ col2 │  col3 │',
		' ─────── ────── ─────── ',
		'│    45 │   33 │ hello │',
		'│ 32.54 │ true │  null │',
		'└─────── ────── ───────┘'
	].join( '\n' );

	str = table.render();
	t.strictEqual( str, expected, 'returns rendered table' );

	t.end();
});

tape( 'the function supports rendering a table with a margin', function test( t ) {
	var expected;
	var headers;
	var table;
	var data;
	var str;

	table = ctor();

	data = [ [ 45, 33, 'hello' ], [ 32.54, true, null ] ];
	headers = [ 'col1', 'col2', 'col3' ];
	table.setData( data, headers );
	table.marginX = 1;
	table.marginY = 1;

	expected = [
		'',
		' ┌───────┬──────┬───────┐ ',
		' │  col1 │ col2 │  col3 │ ',
		' ├───────┼──────┼───────┤ ',
		' │    45 │   33 │ hello │ ',
		' │ 32.54 │ true │  null │ ',
		' └───────┴──────┴───────┘ ',
		''
	].join( '\n' );

	str = table.render();
	t.strictEqual( str, expected, 'returns rendered table' );

	t.end();
});

tape( 'the function supports rendering a table with truncated data', function test( t ) {
	var expected;
	var headers;
	var table;
	var data;
	var str;

	table = ctor();

	data = [ [ 45, 33, 'hello' ], [ 32.54, true, null ] ];
	headers = [ 'col1', 'col2', 'col3' ];
	table.setData( data, headers );
	table.maxCellWidth = 4;

	expected = [
		'┌──────┬──────┬──────┐',
		'│ col1 │ col2 │ col3 │',
		'├──────┼──────┼──────┤',
		'│   45 │   33 │ h... │',
		'│ 3... │ true │ null │',
		'└──────┴──────┴──────┘'
	].join( '\n' );

	str = table.render();
	t.strictEqual( str, expected, 'returns rendered table' );

	t.end();
});

tape( 'the function supports rendering a table with different alignments', function test( t ) {
	var expected;
	var headers;
	var table;
	var data;
	var str;

	table = ctor();

	data = [ [ 45, 33, 'hello' ], [ 32.54, true, null ] ];
	headers = [ 'col1', 'col2', 'col3' ];
	table.setData( data, headers );

	table.alignment = 'right';
	expected = [
		'┌───────┬──────┬───────┐',
		'│  col1 │ col2 │  col3 │',
		'├───────┼──────┼───────┤',
		'│    45 │   33 │ hello │',
		'│ 32.54 │ true │  null │',
		'└───────┴──────┴───────┘'
	].join( '\n' );
	str = table.render();
	t.strictEqual( str, expected, 'returns right-aligned rendered table' );

	table.alignment = 'left';
	expected = [
		'┌───────┬──────┬───────┐',
		'│ col1  │ col2 │ col3  │',
		'├───────┼──────┼───────┤',
		'│ 45    │ 33   │ hello │',
		'│ 32.54 │ true │ null  │',
		'└───────┴──────┴───────┘'
	].join( '\n' );
	str = table.render();
	t.strictEqual( str, expected, 'returns left-aligned rendered table' );

	table.alignment = 'center';
	expected = [
		'┌───────┬──────┬───────┐',
		'│  col1 │ col2 │  col3 │',
		'├───────┼──────┼───────┤',
		'│   45  │  33  │ hello │',
		'│ 32.54 │ true │  null │',
		'└───────┴──────┴───────┘'
	].join( '\n' );
	str = table.render();
	t.strictEqual( str, expected, 'returns center-aligned rendered table' );

	t.end();
});

tape( 'the function supports rendering a wrapped table for long outputs', function test( t ) {
	var expected;
	var headers;
	var table;
	var data;
	var str;

	table = ctor();

	data = [ [ 45, 33, 'hello' ], [ 32.54, true, null ] ];
	headers = [ 'col1', 'col2', 'col3' ];
	table.setData( data, headers );
	table.maxOutputWidth = 16;

	expected = [
		'┌───────┬──────┐',
		'│  col1 │ col2 │',
		'├───────┼──────┤',
		'│    45 │   33 │',
		'│ 32.54 │ true │',
		'└───────┴──────┘',
		'┌───────┐',
		'│  col3 │',
		'├───────┤',
		'│ hello │',
		'│  null │',
		'└───────┘'
	].join( '\n' );

	str = table.render();
	t.strictEqual( str, expected, 'returns rendered table' );

	t.end();
});
