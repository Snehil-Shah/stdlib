/**
* @license Apache-2.0
*
* Copyright (c) 2025 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

var linspace = require( '@stdlib/array/base/linspace' );
var array = require( '@stdlib/ndarray/array' );
var stdout = require( '@stdlib/streams/node/stdout' );
var UnicodeTable = require( './../lib' );

// Define the number of table rows and columns:
var nrows = 10;
var ncols = 5;

// Define initial bounds for generated data:
var start = 0;
var end = 49;

// Generate a data set:
var data = array( linspace( start, end, nrows*ncols ), {
	'shape': [ nrows, ncols ]
});

// Define column headers:
var headers = [ 'A', 'B', 'C', 'D', 'E' ];

// Create a table:
var table = new UnicodeTable( data, {
	'headers': headers,
	'rowSeparator': '-',
	'columnSeparator': '#$%',
	'maxWidth': 200,
	'marginLeft': 5,
	'marginRight': 5,
	'align': 'right',
	'bufferSize': nrows
});

// Render the table:
var str = table.render();
stdout.write( str+'\n' );

// Compute the number of lines:
var N = str.split( '\n' ).length;

// Periodically update the table with new data:
var id = setInterval( update, 2000 );

// After some time, stop updating and close:
setTimeout( onTimeout, 11000 );

function update() {
	// Update data bounds:
	start = end;
	end += ncols - 1;

	// Push a new row to the table:
	table.push( linspace( start, end, ncols ) );

	// Remove the previously rendered table:
	clearPreviousLines( N );

	// Re-render the table:
	stdout.write( table.render()+'\n' );
}

function onTimeout() {
	clearInterval( id );
}

function clearPreviousLines( count ) {
	var i;
	for ( i = 0; i < count; i++ ) {
		stdout.write( '\x1b[F' ); // move cursor up one line
		stdout.write( '\x1b[2K' ); // clear entire line
	}
}
