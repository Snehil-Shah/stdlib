/**
* @license Apache-2.0
*
* Copyright (c) 2025 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var bench = require( '@stdlib/bench' );
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;
var isArray = require( '@stdlib/assert/is-array' );
var isndarrayLike = require( '@stdlib/assert/is-ndarray-like' );
var ndarray = require( '@stdlib/ndarray/ctor' );
var pkg = require( './../package.json' ).name;
var UnicodeTable = require( './../lib' );


// MAIN //

bench( pkg+'::instantiation', function benchmark( b ) {
	var v;
	var i;
	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		v = new UnicodeTable();
		if ( !( v instanceof UnicodeTable ) ) {
			b.fail( 'should return an instance' );
		}
	}
	b.toc();
	if ( !( v instanceof UnicodeTable ) ) {
		b.fail( 'should return an instance' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::instantiation,no_new', function benchmark( b ) {
	var ctor;
	var v;
	var i;

	ctor = UnicodeTable;

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		v = ctor();
		if ( !( v instanceof UnicodeTable ) ) {
			b.fail( 'should return an instance' );
		}
	}
	b.toc();
	if ( !( v instanceof UnicodeTable ) ) {
		b.fail( 'should return an instance' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::instantiation,data', function benchmark( b ) {
	var v;
	var i;

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		v = new UnicodeTable( [ [ 1, 2, 3 ], [ 4, 5, 6 ] ] );
		if ( !( v instanceof UnicodeTable ) ) {
			b.fail( 'should return an instance' );
		}
	}
	b.toc();
	if ( !( v instanceof UnicodeTable ) ) {
		b.fail( 'should return an instance' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::instantiation,data,headers', function benchmark( b ) {
	var v;
	var i;

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		v = new UnicodeTable( [ [ 1, 2, 3 ], [ 4, 5, 6 ] ] );
		if ( !( v instanceof UnicodeTable ) ) {
			b.fail( 'should return an instance' );
		}
	}
	b.toc();
	if ( !( v instanceof UnicodeTable ) ) {
		b.fail( 'should return an instance' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::instantiation,data,options', function benchmark( b ) {
	var opts;
	var v;
	var i;

	opts = {
		'align': 'left',
		'autoRender': false,
		'borderTop': '1',
		'borderRight': '23',
		'borderBottom': '456',
		'borderLeft': '7890',
		'borders': [ '1', '23', '456', '7890' ],
		'bufferSize': 10,
		'columnSeparator': 'None',
		'cornerTopLeft': '*',
		'cornerTopRight': '*',
		'cornerBottomLeft': '*',
		'cornerBottomRight': '*',
		'corners': [ '*', '*', '*', '*' ],
		'format': '%d',
		'headerAlign': 'center',
		'headers': [ 'col1', 'col2', 'col3' ],
		'headerSeparator': '-=',
		'horizontalSeparatorMode': 'repeat',
		'jointMiddle': '*',
		'jointTop': '*',
		'jointRight': '*',
		'jointBottom': '*',
		'jointLeft': '*',
		'joints': [ '*', '*', '*', '*', '*' ],
		'marginTop': 4,
		'marginRight': 2,
		'marginBottom': 4,
		'marginLeft': 2,
		'margins': [ 4, 2, 4, 2 ],
		'maxColumnWidth': 10,
		'maxWidth': 60,
		'paddingLeft': 2,
		'paddingRight': [ 2, 3, 4 ],
		'rowSeparator': '_-',
		'verticalSeparatorMode': 'resume'
	};
	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		v = new UnicodeTable( [ [ 1, 2, 3 ], [ 4, 5, 6 ] ], opts );
		if ( !( v instanceof UnicodeTable ) ) {
			b.fail( 'should return an instance' );
		}
	}
	b.toc();
	if ( !( v instanceof UnicodeTable ) ) {
		b.fail( 'should return an instance' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::set,get:align:value=string', function benchmark( b ) {
	var values;
	var v;
	var i;

	values = [
		'left',
		'center',
		'right'
	];
	v = new UnicodeTable();

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		v.align = values[ i % values.length ];
		if ( !isString( v.align ) ) {
			b.fail( 'should return a string' );
		}
	}
	b.toc();
	if ( !isString( v.align ) ) {
		b.fail( 'should return a string' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::set,get:align:value=array', function benchmark( b ) {
	var values;
	var v;
	var i;

	values = [
		[ 'left', 'right' ],
		[ 'center', 'right' ],
		[ 'left', 'center' ]
	];
	v = new UnicodeTable();

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		v.align = values[ i % values.length ];
		if ( !isArray( v.align ) ) {
			b.fail( 'should return an array' );
		}
	}
	b.toc();
	if ( !isArray( v.align ) ) {
		b.fail( 'should return an array' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::set,get:autoRender', function benchmark( b ) {
	var values;
	var v;
	var i;

	values = [
		false,
		true
	];
	v = new UnicodeTable();

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		v.autoRender = values[ i % values.length ];
		if ( !isBoolean( v.autoRender ) ) {
			b.fail( 'should return a boolean' );
		}
	}
	b.toc();
	if ( !isBoolean( v.autoRender ) ) {
		b.fail( 'should return a boolean' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::set,get:borderTop', function benchmark( b ) {
	var values;
	var v;
	var i;

	values = [
		'1',
		'2'
	];
	v = new UnicodeTable();

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		v.borderTop = values[ i % values.length ];
		if ( !isString( v.borderTop ) ) {
			b.fail( 'should return a string' );
		}
	}
	b.toc();
	if ( !isString( v.borderTop ) ) {
		b.fail( 'should return a string' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::set,get:borderRight', function benchmark( b ) {
	var values;
	var v;
	var i;

	values = [
		'1',
		'2'
	];
	v = new UnicodeTable();

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		v.borderRight = values[ i % values.length ];
		if ( !isString( v.borderRight ) ) {
			b.fail( 'should return a string' );
		}
	}
	b.toc();
	if ( !isString( v.borderRight ) ) {
		b.fail( 'should return a string' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::set,get:borderBottom', function benchmark( b ) {
	var values;
	var v;
	var i;

	values = [
		'1',
		'2'
	];
	v = new UnicodeTable();

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		v.borderBottom = values[ i % values.length ];
		if ( !isString( v.borderBottom ) ) {
			b.fail( 'should return a string' );
		}
	}
	b.toc();
	if ( !isString( v.borderBottom ) ) {
		b.fail( 'should return a string' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::set,get:borderLeft', function benchmark( b ) {
	var values;
	var v;
	var i;

	values = [
		'1',
		'2'
	];
	v = new UnicodeTable();

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		v.borderLeft = values[ i % values.length ];
		if ( !isString( v.borderLeft ) ) {
			b.fail( 'should return a string' );
		}
	}
	b.toc();
	if ( !isString( v.borderLeft ) ) {
		b.fail( 'should return a string' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::set,get:borders', function benchmark( b ) {
	var values;
	var v;
	var i;

	values = [
		[ '-', '|', '-', '|' ],
		[ '1', '23', '456', '7890' ],
		[ '', '', '', '' ],
		[ '🌹', '🥀', '🔥', '👍' ]
	];
	v = new UnicodeTable();

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		v.borders = values[ i % values.length ];
		if ( !isArray( v.borders ) ) {
			b.fail( 'should return an array' );
		}
	}
	b.toc();
	if ( !isArray( v.borders ) ) {
		b.fail( 'should return an array' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::set,get:bufferSize', function benchmark( b ) {
	var values;
	var v;
	var i;

	values = [
		1,
		2,
		3,
		null
	];
	v = new UnicodeTable();

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		v.bufferSize = values[ i % values.length ];
		if ( !isNumber( v.bufferSize ) ) {
			b.fail( 'should return a number' );
		}
	}
	b.toc();
	if ( !isNumber( v.bufferSize ) ) {
		b.fail( 'should return a number' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::set,get:columnSeparator', function benchmark( b ) {
	var values;
	var v;
	var i;

	values = [
		'|',
		'123',
		'🥀',
		''
	];
	v = new UnicodeTable();

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		v.columnSeparator = values[ i % values.length ];
		if ( !isString( v.columnSeparator ) ) {
			b.fail( 'should return a string' );
		}
	}
	b.toc();
	if ( !isString( v.columnSeparator ) ) {
		b.fail( 'should return a string' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::set,get:cornerTopLeft', function benchmark( b ) {
	var values;
	var v;
	var i;

	values = [
		'-',
		'*'
	];
	v = new UnicodeTable();

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		v.cornerTopLeft = values[ i % values.length ];
		if ( !isString( v.cornerTopLeft ) ) {
			b.fail( 'should return a string' );
		}
	}
	b.toc();
	if ( !isString( v.cornerTopLeft ) ) {
		b.fail( 'should return a string' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::set,get:cornerTopRight', function benchmark( b ) {
	var values;
	var v;
	var i;

	values = [
		'-',
		'*'
	];
	v = new UnicodeTable();

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		v.cornerTopRight = values[ i % values.length ];
		if ( !isString( v.cornerTopRight ) ) {
			b.fail( 'should return a string' );
		}
	}
	b.toc();
	if ( !isString( v.cornerTopRight ) ) {
		b.fail( 'should return a string' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::set,get:cornerBottomRight', function benchmark( b ) {
	var values;
	var v;
	var i;

	values = [
		'-',
		'*'
	];
	v = new UnicodeTable();

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		v.cornerBottomRight = values[ i % values.length ];
		if ( !isString( v.cornerBottomRight ) ) {
			b.fail( 'should return a string' );
		}
	}
	b.toc();
	if ( !isString( v.cornerBottomRight ) ) {
		b.fail( 'should return a string' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::set,get:cornerBottomLeft', function benchmark( b ) {
	var values;
	var v;
	var i;

	values = [
		'-',
		'*'
	];
	v = new UnicodeTable();

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		v.cornerBottomLeft = values[ i % values.length ];
		if ( !isString( v.cornerBottomLeft ) ) {
			b.fail( 'should return a string' );
		}
	}
	b.toc();
	if ( !isString( v.cornerBottomLeft ) ) {
		b.fail( 'should return a string' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::set,get:corners', function benchmark( b ) {
	var values;
	var v;
	var i;

	values = [
		[ '-', '|', '-', '|' ],
		[ '🌹', '🥀', '🔥', '👍' ]
	];
	v = new UnicodeTable();

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		v.corners = values[ i % values.length ];
		if ( !isArray( v.corners ) ) {
			b.fail( 'should return an array' );
		}
	}
	b.toc();
	if ( !isArray( v.corners ) ) {
		b.fail( 'should return an array' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::set,get:data:value=nested_array', function benchmark( b ) {
	var values;
	var v;
	var i;

	values = [
		[ [ 1, 2, 3 ], [ 4, 5, 6 ] ],
		[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]
	];
	v = new UnicodeTable();

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		v.data = values[ i % values.length ];
		if ( typeof v.data !== 'object' ) {
			b.fail( 'should return an ndarray' );
		}
	}
	b.toc();
	if ( !isndarrayLike( v.data ) ) {
		b.fail( 'should return an ndarray' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::set,get:data:value=dictionary_of_columns', function benchmark( b ) {
	var values;
	var v;
	var i;

	values = [
		{
			'a': [ 1, 2, 3 ],
			'b': [ 4, 5, 6 ]
		},
		{
			'a': [ 1, 2, 3 ],
			'b': [ 4, 5, 6 ]
		}
	];
	v = new UnicodeTable();

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		v.data = values[ i % values.length ];
		if ( typeof v.data !== 'object' ) {
			b.fail( 'should return an ndarray' );
		}
	}
	b.toc();
	if ( !isndarrayLike( v.data ) ) {
		b.fail( 'should return an ndarray' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::set,get:data:value=ndarray', function benchmark( b ) {
	var values;
	var v;
	var i;

	values = [
		ndarray( 'generic', [ 1, 2, 3, 4, 5, 6 ], [ 2, 3 ], [ 3, 1 ], 0, 'row-major' ),
		ndarray( 'generic', [ 1, 2, 3, 4, 5, 6 ], [ 2, 3 ], [ 3, 1 ], 0, 'row-major' )
	];
	v = new UnicodeTable();

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		v.data = values[ i % values.length ];
		if ( typeof v.data !== 'object' ) {
			b.fail( 'should return an ndarray' );
		}
	}
	b.toc();
	if ( !isndarrayLike( v.data ) ) {
		b.fail( 'should return an ndarray' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::set,get:format:value=string', function benchmark( b ) {
	var values;
	var v;
	var i;

	values = [
		'%d',
		'%f'
	];
	v = new UnicodeTable();

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		v.format = values[ i % values.length ];
		if ( !isString( v.format ) ) {
			b.fail( 'should return a string' );
		}
	}
	b.toc();
	if ( !isString( v.format ) ) {
		b.fail( 'should return a string' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::set,get:format:value=array', function benchmark( b ) {
	var values;
	var v;
	var i;

	values = [
		[ '%d' ],
		[ '%f' ]
	];
	v = new UnicodeTable();

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		v.format = values[ i % values.length ];
		if ( !isArray( v.format ) ) {
			b.fail( 'should return an array' );
		}
	}
	b.toc();
	if ( !isArray( v.format ) ) {
		b.fail( 'should return an array' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::set,get:headerAlign:value=string', function benchmark( b ) {
	var values;
	var v;
	var i;

	values = [
		'left',
		'center',
		'right'
	];
	v = new UnicodeTable();

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		v.headerAlign = values[ i % values.length ];
		if ( !isString( v.headerAlign ) ) {
			b.fail( 'should return a string' );
		}
	}
	b.toc();
	if ( !isString( v.headerAlign ) ) {
		b.fail( 'should return a string' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::set,get:headerAlign:value=array', function benchmark( b ) {
	var values;
	var v;
	var i;

	values = [
		[ 'left', 'right' ],
		[ 'center', 'right' ],
		[ 'left', 'center' ]
	];
	v = new UnicodeTable();

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		v.headerAlign = values[ i % values.length ];
		if ( !isArray( v.headerAlign ) ) {
			b.fail( 'should return an array' );
		}
	}
	b.toc();
	if ( !isArray( v.headerAlign ) ) {
		b.fail( 'should return an array' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::set,get:headers', function benchmark( b ) {
	var values;
	var v;
	var i;

	values = [
		[ 'col1', 'col2', 'col3' ],
		[ 1, 2, 3 ]
	];
	v = new UnicodeTable();

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		v.headers = values[ i % values.length ];
		if ( !isArray( v.headers ) ) {
			b.fail( 'should return an array' );
		}
	}
	b.toc();
	if ( !isArray( v.headers ) ) {
		b.fail( 'should return an array' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::set,get:headerSeparator', function benchmark( b ) {
	var values;
	var v;
	var i;

	values = [
		'|',
		'123',
		'🥀',
		''
	];
	v = new UnicodeTable();

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		v.headerSeparator = values[ i % values.length ];
		if ( !isString( v.headerSeparator ) ) {
			b.fail( 'should return a string' );
		}
	}
	b.toc();
	if ( !isString( v.headerSeparator ) ) {
		b.fail( 'should return a string' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::set,get:horizontalSeparatorMode', function benchmark( b ) {
	var values;
	var v;
	var i;

	values = [
		'repeat',
		'resume',
		'interpolate'
	];
	v = new UnicodeTable();

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		v.horizontalSeparatorMode = values[ i % values.length ];
		if ( !isString( v.horizontalSeparatorMode ) ) {
			b.fail( 'should return a string' );
		}
	}
	b.toc();
	if ( !isString( v.horizontalSeparatorMode ) ) {
		b.fail( 'should return a string' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::set,get:jointMiddle', function benchmark( b ) {
	var values;
	var v;
	var i;

	values = [
		'-',
		'*'
	];
	v = new UnicodeTable();

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		v.jointMiddle = values[ i % values.length ];
		if ( !isString( v.jointMiddle ) ) {
			b.fail( 'should return a string' );
		}
	}
	b.toc();
	if ( !isString( v.jointMiddle ) ) {
		b.fail( 'should return a string' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::set,get:jointTop', function benchmark( b ) {
	var values;
	var v;
	var i;

	values = [
		'-',
		'*'
	];
	v = new UnicodeTable();

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		v.jointTop = values[ i % values.length ];
		if ( !isString( v.jointTop ) ) {
			b.fail( 'should return a string' );
		}
	}
	b.toc();
	if ( !isString( v.jointTop ) ) {
		b.fail( 'should return a string' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::set,get:jointRight', function benchmark( b ) {
	var values;
	var v;
	var i;

	values = [
		'-',
		'*'
	];
	v = new UnicodeTable();

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		v.jointRight = values[ i % values.length ];
		if ( !isString( v.jointRight ) ) {
			b.fail( 'should return a string' );
		}
	}
	b.toc();
	if ( !isString( v.jointRight ) ) {
		b.fail( 'should return a string' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::set,get:jointBottom', function benchmark( b ) {
	var values;
	var v;
	var i;

	values = [
		'-',
		'*'
	];
	v = new UnicodeTable();

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		v.jointBottom = values[ i % values.length ];
		if ( !isString( v.jointBottom ) ) {
			b.fail( 'should return a string' );
		}
	}
	b.toc();
	if ( !isString( v.jointBottom ) ) {
		b.fail( 'should return a string' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::set,get:jointLeft', function benchmark( b ) {
	var values;
	var v;
	var i;

	values = [
		'-',
		'*'
	];
	v = new UnicodeTable();

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		v.jointLeft = values[ i % values.length ];
		if ( !isString( v.jointLeft ) ) {
			b.fail( 'should return a string' );
		}
	}
	b.toc();
	if ( !isString( v.jointLeft ) ) {
		b.fail( 'should return a string' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::set,get:joints', function benchmark( b ) {
	var values;
	var v;
	var i;

	values = [
		[ '-', '|', '-', '|', '=' ],
		[ '🌹', '🥀', '🔥', '👍', '📸' ]
	];
	v = new UnicodeTable();

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		v.joints = values[ i % values.length ];
		if ( !isArray( v.joints ) ) {
			b.fail( 'should return an array' );
		}
	}
	b.toc();
	if ( !isArray( v.joints ) ) {
		b.fail( 'should return an array' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::set,get:marginTop', function benchmark( b ) {
	var values;
	var v;
	var i;

	values = [
		0,
		1,
		2
	];
	v = new UnicodeTable();

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		v.marginTop = values[ i % values.length ];
		if ( !isNumber( v.marginTop ) ) {
			b.fail( 'should return a number' );
		}
	}
	b.toc();
	if ( !isNumber( v.marginTop ) ) {
		b.fail( 'should return a number' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::set,get:marginRight', function benchmark( b ) {
	var values;
	var v;
	var i;

	values = [
		0,
		1,
		2
	];
	v = new UnicodeTable();

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		v.marginRight = values[ i % values.length ];
		if ( !isNumber( v.marginRight ) ) {
			b.fail( 'should return a number' );
		}
	}
	b.toc();
	if ( !isNumber( v.marginRight ) ) {
		b.fail( 'should return a number' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::set,get:marginBottom', function benchmark( b ) {
	var values;
	var v;
	var i;

	values = [
		0,
		1,
		2
	];
	v = new UnicodeTable();

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		v.marginBottom = values[ i % values.length ];
		if ( !isNumber( v.marginBottom ) ) {
			b.fail( 'should return a number' );
		}
	}
	b.toc();
	if ( !isNumber( v.marginBottom ) ) {
		b.fail( 'should return a number' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::set,get:marginLeft', function benchmark( b ) {
	var values;
	var v;
	var i;

	values = [
		0,
		1,
		2
	];
	v = new UnicodeTable();

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		v.marginLeft = values[ i % values.length ];
		if ( !isNumber( v.marginLeft ) ) {
			b.fail( 'should return a number' );
		}
	}
	b.toc();
	if ( !isNumber( v.marginLeft ) ) {
		b.fail( 'should return a number' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::set,get:margins', function benchmark( b ) {
	var values;
	var v;
	var i;

	values = [
		[ 0, 0, 0, 0 ],
		[ 1, 2, 3, 4 ]
	];
	v = new UnicodeTable();

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		v.margins = values[ i % values.length ];
		if ( !isArray( v.margins ) ) {
			b.fail( 'should return an array' );
		}
	}
	b.toc();
	if ( !isArray( v.margins ) ) {
		b.fail( 'should return an array' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::set,get:maxColumnWidth:value=number', function benchmark( b ) {
	var values;
	var v;
	var i;

	values = [
		10,
		20,
		30,
		null
	];
	v = new UnicodeTable();

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		v.maxColumnWidth = values[ i % values.length ];
		if ( !isNumber( v.maxColumnWidth ) ) {
			b.fail( 'should return a number' );
		}
	}
	b.toc();
	if ( !isNumber( v.maxColumnWidth ) ) {
		b.fail( 'should return a number' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::set,get:maxColumnWidth:value=array', function benchmark( b ) {
	var values;
	var v;
	var i;

	values = [
		[ 1, 2, 3 ],
		[ 4, 5, 6 ],
		[ 7, null, 9 ],
		[ null, null, null ]
	];
	v = new UnicodeTable();

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		v.maxColumnWidth = values[ i % values.length ];
		if ( !isArray( v.maxColumnWidth ) ) {
			b.fail( 'should return an array' );
		}
	}
	b.toc();
	if ( !isArray( v.maxColumnWidth ) ) {
		b.fail( 'should return an array' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::set,get:maxWidth', function benchmark( b ) {
	var values;
	var v;
	var i;

	values = [
		100,
		200,
		300,
		null
	];
	v = new UnicodeTable();

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		v.maxWidth = values[ i % values.length ];
		if ( !isNumber( v.maxWidth ) ) {
			b.fail( 'should return a number' );
		}
	}
	b.toc();
	if ( !isNumber( v.maxWidth ) ) {
		b.fail( 'should return a number' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::set,get:paddingLeft:value=number', function benchmark( b ) {
	var values;
	var v;
	var i;

	values = [
		1,
		2,
		3
	];
	v = new UnicodeTable();

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		v.paddingLeft = values[ i % values.length ];
		if ( !isNumber( v.paddingLeft ) ) {
			b.fail( 'should return a number' );
		}
	}
	b.toc();
	if ( !isNumber( v.paddingLeft ) ) {
		b.fail( 'should return a number' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::set,get:paddingLeft:value=array', function benchmark( b ) {
	var values;
	var v;
	var i;

	values = [
		[ 1, 2 ],
		[ 3, 4 ],
		[ 5, 6 ]
	];
	v = new UnicodeTable();

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		v.paddingLeft = values[ i % values.length ];
		if ( !isArray( v.paddingLeft ) ) {
			b.fail( 'should return an array' );
		}
	}
	b.toc();
	if ( !isArray( v.paddingLeft ) ) {
		b.fail( 'should return an array' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::set,get:paddingRight:value=number', function benchmark( b ) {
	var values;
	var v;
	var i;

	values = [
		1,
		2,
		3
	];
	v = new UnicodeTable();

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		v.paddingRight = values[ i % values.length ];
		if ( !isNumber( v.paddingRight ) ) {
			b.fail( 'should return a number' );
		}
	}
	b.toc();
	if ( !isNumber( v.paddingRight ) ) {
		b.fail( 'should return a number' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::set,get:paddingRight:value=array', function benchmark( b ) {
	var values;
	var v;
	var i;

	values = [
		[ 1, 2 ],
		[ 3, 4 ],
		[ 5, 6 ]
	];
	v = new UnicodeTable();

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		v.paddingRight = values[ i % values.length ];
		if ( !isArray( v.paddingRight ) ) {
			b.fail( 'should return an array' );
		}
	}
	b.toc();
	if ( !isArray( v.paddingRight ) ) {
		b.fail( 'should return an array' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::set,get:rowSeparator', function benchmark( b ) {
	var values;
	var v;
	var i;

	values = [
		'|',
		'123',
		'🥀',
		''
	];
	v = new UnicodeTable();

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		v.rowSeparator = values[ i % values.length ];
		if ( !isString( v.rowSeparator ) ) {
			b.fail( 'should return a string' );
		}
	}
	b.toc();
	if ( !isString( v.rowSeparator ) ) {
		b.fail( 'should return a string' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

bench( pkg+'::set,get:verticalSeparatorMode', function benchmark( b ) {
	var values;
	var v;
	var i;

	values = [
		'repeat',
		'resume',
		'interpolate'
	];
	v = new UnicodeTable();

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		v.verticalSeparatorMode = values[ i % values.length ];
		if ( !isString( v.verticalSeparatorMode ) ) {
			b.fail( 'should return a string' );
		}
	}
	b.toc();
	if ( !isString( v.verticalSeparatorMode ) ) {
		b.fail( 'should return a string' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});
