/**
* @license Apache-2.0
*
* Copyright (c) 2025 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var bench = require( '@stdlib/bench' );
var random = require( '@stdlib/random/array/discrete-uniform' );
var pow = require( '@stdlib/math/base/special/pow' );
var array = require( '@stdlib/ndarray/array' );
var pkg = require( './../package.json' ).name;
var UnicodeTable = require( './../lib' );


// FUNCTIONS //

/**
* Creates a benchmark function.
*
* @private
* @param {PositiveInteger} rows - number of rows
* @param {PositiveInteger} columns - number of columns
* @param {UnicodeTable} table - table instance
* @returns {Function} benchmark function
*/
function createBenchmark( rows, columns, table ) {
	var data;

	data = random( rows*columns, 0, 100, {
		'dtype': 'float64'
	});
	table.data = array( data, {
		'shape': [ rows, columns ]
	});
	table.headers = random( columns, 0, columns, {
		'dtype': 'generic'
	});
	return benchmark;

	/**
	* Benchmark function.
	*
	* @private
	* @param {Benchmark} b - benchmark instance
	*/
	function benchmark( b ) {
		var str;
		var i;

		b.tic();
		for ( i = 0; i < b.iterations; i++ ) {
			str = table.render();
			if ( typeof str !== 'string' ) {
				b.fail( 'should return a string' );
			}
		}
		b.toc();
		if ( typeof str !== 'string' ) {
			b.fail( 'should return a string' );
		}
		b.pass( 'benchmark finished' );
		b.end();
	}
}


// MAIN //

/**
* Main execution sequence.
*
* @private
*/
function main() {
	var columns;
	var table;
	var rows;
	var min;
	var max;
	var f;
	var i;
	var j;

	min = 1; // 5^min
	max = 3; // 5^max

	for ( i = min; i <= max; i++ ) {
		for ( j = min; j <= max; j++ ) {
			rows = pow( 5, i );
			columns = pow( 5, j );

			table = new UnicodeTable();
			table.bufferSize = rows;
			f = createBenchmark( rows, columns, table );
			bench( pkg+':render:rows='+rows+',columns='+columns, f );
		}
	}
}

main();
