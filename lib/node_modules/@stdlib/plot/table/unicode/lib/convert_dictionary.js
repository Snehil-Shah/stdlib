/**
* @license Apache-2.0
*
* Copyright (c) 2025 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isCollection = require( '@stdlib/assert/is-collection' );
var objectKeys = require( '@stdlib/utils/keys' );
var array2matrix = require( './array2matrix.js' );


// MAIN //

/**
* Converts table data provided as a dictionary of columns.
*
* @private
* @param {*} data - input data
* @param {(ObjectArray|null)} headers - table headers
* @throws {TypeError} invalid input data
* @returns {Object} table data
*/
function convertDictionary( data, headers ) {
	var keys;
	var out;
	var flg;
	var obj;
	var col;
	var M;
	var N;
	var i;
	var j;
	var k;

	obj = {
		'data': null,
		'headers': null,
		'code': ''
	};

	// If we don't already have headers, infer the headers from the provided object...
	if ( headers === null ) {
		keys = objectKeys( data );
		flg = true;
	} else {
		keys = headers;
	}
	// If provided an empty object (or an object without enumerable properties), likely a user error...
	if ( keys.length === 0 ) {
		obj.code = 'ERR_EMPTY_OBJECT';
		return obj;
	}
	// Validate that property value is a collection (column) of data having the same length...
	col = data[ keys[ 0 ] ];
	if ( !isCollection( col ) ) {
		obj.code = 'ERR_INVALID_OBJECT';
		return obj;
	}
	M = col.length;
	N = keys.length;
	for ( i = 1; i < N; i++ ) {
		col = data[ keys[ i ] ];
		if ( !isCollection( col ) ) {
			obj.code = 'ERR_INVALID_OBJECT';
			return obj;
		}
		if ( col.length !== M ) {
			obj.code = 'ERR_UNEQUAL_COLUMN_LENGTHS';
			return obj;
		}
	}
	// Flatten the dictionary of columns into a row-major linear buffer...
	out = [];
	for ( i = 0; i < M; i++ ) {
		for ( j = 0; j < N; j++ ) {
			k = keys[ j ];
			out.push( data[ k ][ i ] );
		}
	}
	obj.data = array2matrix( out, [ M, N ] );
	obj.headers = ( flg ) ? keys : null;
	return obj;
}


// EXPORTS //

module.exports = convertDictionary;
