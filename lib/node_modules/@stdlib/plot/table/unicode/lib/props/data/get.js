/**
* @license Apache-2.0
*
* Copyright (c) 2025 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-invalid-this */

'use strict';

// MODULES //

var isNull = require( '@stdlib/assert/is-null' );
var resolveGetter = require( '@stdlib/array/base/resolve-getter' );
var getShape = require( '@stdlib/ndarray/base/shape' );
var getDType = require( '@stdlib/ndarray/base/dtype' );
var getData = require( '@stdlib/ndarray/base/data-buffer' );
var getOrder = require( '@stdlib/ndarray/base/order' );
var getStrides = require( '@stdlib/ndarray/base/strides' );
var getOffset = require( '@stdlib/ndarray/base/offset' );
var ndarray = require( '@stdlib/ndarray/ctor' );


// FUNCTIONS //

/**
* Extracts a property value from each element in an array of objects.
*
* @private
* @param {Collection} arr - input array
* @param {(string|symbol)} prop - property value
* @returns {Array} output array
*/
function pluck( arr, prop ) { // TODO: considering moving to array/base/pluck; added here in order to support accessor arrays; however, it does make certain assumptions that utils/base/pluck does not.
	var out;
	var get;
	var i;

	get = resolveGetter( arr );
	out = [];
	for ( i = 0; i < arr.length; i++ ) {
		out.push( get( arr, i )[ prop ] );
	}
	return out;
}


// MAIN //

/**
* Returns table data as a read-only ndarray view.
*
* @private
* @returns {(ndarray|null)} table data
*/
function get() {
	var view;
	var buf;

	view = this._data;
	if ( isNull( view ) ) {
		return null;
	}
	buf = pluck( getData( view ), 'raw' );
	return new ndarray( getDType( view ), buf, getShape( view ), getStrides( view ), getOffset( view ), getOrder( view ), { // eslint-disable-line max-len
		'readonly': true
	});
}


// EXPORTS //

module.exports = get;
