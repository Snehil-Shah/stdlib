/**
* @license Apache-2.0
*
* Copyright (c) 2025 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-invalid-this */

'use strict';

// MODULES //

var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var isCollection = require( '@stdlib/assert/is-collection' );
var splitGraphemeClusters = require( '@stdlib/string/split-grapheme-clusters' );
var copy = require( '@stdlib/array/base/copy' );
var format = require( '@stdlib/string/format' );
var everyBy2 = require( './../../every_by2.js' );
var wcswidth = require( './../../wcswidth.js' ); // TODO: replace with string/base/wcswidth


// VARIABLES //

var NUM_JOINTS = 5;


// FUNCTIONS //

/**
* Predicate function which tests whether two elements are equal.
*
* @private
* @param {Object} v1 - first value
* @param {Object} v2 - second value
* @returns {boolean} boolean indicating whether two elements are equal
*/
function predicate( v1, v2 ) {
	return ( v1.value === v2.value );
}


// MAIN //

/**
* Sets the joint characters in the order `[middle, top, right, bottom, left ]`.
*
* @private
* @param {Array<string>} values - joint characters
* @throws {TypeError} must be an array of strings
* @throws {TypeError} each array element must be a single character
* @throws {RangeError} must provide five strings
*/
function set( values ) {
	var data;
	var w;
	var v;
	var i;

	if ( !isCollection( values ) ) {
		throw new TypeError( format( 'invalid assignment. `%s` must be an array of strings. Value: `%s`.', 'joints', values ) );
	}
	if ( values.length !== NUM_JOINTS ) {
		throw new RangeError( format( 'invalid assignment. `%s` must have a length of %d. Value: `["%s"]`.', 'joints', NUM_JOINTS, copy( values ).join( '", "' ) ) );
	}
	data = [];
	for ( i = 0; i < NUM_JOINTS; i++ ) {
		v = values[ i ];
		if ( !isString( v ) ) {
			throw new TypeError( format( 'invalid assignment. `%s` must be an array of strings in which each array element is a string containing one and only one character. Value: `["%s"]`.', 'joints', copy( values ).join( '", "' ) ) );
		}
		w = wcswidth( v );
		if ( w !== 1 ) {
			throw new TypeError( format( 'invalid assignment. `%s` must be an array of strings in which each array element is a string containing one and only one character. Value: `["%s"]`.', 'joints', copy( values ).join( '", "' ) ) );
		}
		data.push({
			'value': v,
			'graphemes': splitGraphemeClusters( v ),
			'width': w
		});
	}
	if ( !everyBy2( data, this._joints, predicate ) ) {
		this._joints = data;
		if ( !this._quiet ) {
			this.emit( 'change' );
		}
	}
}


// EXPORTS //

module.exports = set;
