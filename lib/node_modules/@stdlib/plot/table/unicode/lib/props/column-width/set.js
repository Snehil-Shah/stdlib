/**
* @license Apache-2.0
*
* Copyright (c) 2025 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-invalid-this */

'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;
var isCollection = require( '@stdlib/assert/is-collection' );
var isNull = require( '@stdlib/assert/is-null' );
var isEqualArray = require( '@stdlib/assert/is-equal-array' );
var copy = require( '@stdlib/array/base/copy' );
var format = require( '@stdlib/string/format' );


// MAIN //

/**
* Sets the column width(s) for each table column in units of character columns.
*
* @private
* @param {(Collection<NonNegativeInteger|null>|NonNegativeInteger|null)} value - column width(s)
* @throws {TypeError} must be null, a nonnegative integer, an array of nonnegative integers and/or nulls
* @throws {RangeError} must provide the correct number of table columns
*/
function set( value ) {
	var out;
	var len;
	var v;
	var i;

	if ( !isCollection( value ) ) {
		if ( isNull( value ) || isNonNegativeInteger( value ) ) {
			out = [ value ];
		} else {
			throw new TypeError( format( 'invalid assignment. `%s` must be either null, a nonnegative integer, or an array of nonnegative integers and/or nulls. Value: `%s`.', 'columnWidth', value ) );
		}
		if ( !isEqualArray( out, this._columnWidth ) ) {
			this._columnWidth = out;
			if ( !this._quiet ) {
				this.emit( 'change' );
			}
		}
		return;
	}
	len = value.length;
	if ( this._numColumns ) {
		if ( len !== this._numColumns ) {
			throw new RangeError( format( 'invalid assignment. `%s` must have a length of %d in order to match the number of table columns. Value: `["%s"]`.', 'columnWidth', this._numColumns, copy( value ).join( '", "' ) ) );
		}
	} else {
		this._numColumns = len;
	}
	out = [];
	for ( i = 0; i < len; i++ ) {
		v = value[ i ];
		if ( isNull( v ) || isNonNegativeInteger( v ) ) {
			out.push( v );
			continue;
		}
		throw new TypeError( format( 'invalid assignment. `%s` must be either null, a nonnegative integer, or an array of nonnegative integers and/or nulls. Value: `["%s"]`.', 'columnWidth', copy( value ).join( '", "' ) ) );
	}
	if ( !isEqualArray( out, this._columnWidth ) ) {
		this._columnWidth = out;
		if ( !this._quiet ) {
			this.emit( 'change' );
		}
	}
}


// EXPORTS //

module.exports = set;
