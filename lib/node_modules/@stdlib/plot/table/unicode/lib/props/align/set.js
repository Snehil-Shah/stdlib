/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-invalid-this */

'use strict';

// MODULES //

var contains = require( '@stdlib/array/base/assert/contains' ).factory;
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var isCollection = require( '@stdlib/assert/is-collection' );
var isEqualArray = require( '@stdlib/assert/is-equal-array' );
var copy = require( '@stdlib/array/base/copy' );
var format = require( '@stdlib/string/format' );


// VARIABLES //

var isAlignment = contains( [ 'right', 'center', 'left' ] );


// MAIN //

/**
* Sets the alignment(s) of data within table cells.
*
* @private
* @param {(Array<string>|string)} value - cell alignment(s)
* @throws {TypeError} must be a supported alignment or an array of alignments
* @throws {RangeError} must provide the correct number of columns
*/
function set( value ) {
	var tmp;
	var i;
	if ( isString( value ) ) {
		if ( !isAlignment( value ) ) {
			throw new TypeError( format( 'invalid assignment. `%s` must be a supported alignment. Value: `%s`.', 'align', value ) );
		}
		value = [ value ];
		if ( !isEqualArray( value, this._align ) ) {
			this._align = value;
			if ( !this._quiet ) {
				this.emit( 'change' );
			}
		}
		return;
	}
	if ( !isCollection( value ) ) {
		throw new TypeError( format( 'invalid assignment. `%s` must be a string or an array of strings. Value: `%s`.', 'align', value ) );
	}
	tmp = [];
	for ( i = 0; i < value.length; i++ ) {
		if ( !isAlignment( value[ i ] ) ) {
			throw new TypeError( format( 'invalid assignment. `%s` must be an array of supported alignments. Value: `["%s"]`.', 'align', copy( value ) ).join( '", "' ) );
		}
		// Explicitly copy to a new array to avoid external mutation:
		tmp.push( value[ i ] );
	}
	if ( this._numColumns ) {
		if ( tmp.length !== this._numColumns ) {
			throw new RangeError( format( 'invalid assignment. `%s` must have a length of %d in order to match the number of table columns. Value: `["%s"]`.', 'align', this._numColumns, tmp.join( '", "' ) ) );
		}
	} else {
		this._numColumns = tmp.length;
	}
	if ( !isEqualArray( tmp, this._align ) ) {
		this._align = tmp;
		if ( !this._quiet ) {
			this.emit( 'change' );
		}
	}
}


// EXPORTS //

module.exports = set;
