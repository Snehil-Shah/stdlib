/**
* @license Apache-2.0
*
* Copyright (c) 2025 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-invalid-this */

'use strict';

// MODULES //

var isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;
var isNull = require( '@stdlib/assert/is-null' );
var numelDimension = require( '@stdlib/ndarray/base/numel-dimension' );
var getStrides = require( '@stdlib/ndarray/base/strides' );
var getData = require( '@stdlib/ndarray/base/data-buffer' );
var getDType = require( '@stdlib/ndarray/base/dtype' );
var getOrder = require( '@stdlib/ndarray/base/order' );
var getOffset = require( '@stdlib/ndarray/base/offset' );
var ndarray = require( '@stdlib/ndarray/base/ctor' );
var FLOAT64_MAX = require( '@stdlib/constants/float64/max' );
var format = require( '@stdlib/string/format' );


// MAIN //

/**
* Sets the data buffer size.
*
* @private
* @param {(PositiveInteger|null)} value - data buffer size
* @throws {TypeError} must be a positive integer or null
*/
function set( value ) {
	var ncols;
	var data;
	var buf;
	var sh;
	var s;
	if ( isNull( value ) ) {
		s = FLOAT64_MAX;
	} else if ( isPositiveInteger( value ) ) {
		s = value;
	} else {
		throw new TypeError( format( 'invalid assignment. `%s` must be a positive integer or null. Value: `%s`.', 'bufferSize', value ) );
	}
	if ( s !== this._bufferSize ) {
		data = this._data;

		// Check whether we need to shrink the internal FIFO queue...
		if ( data && s < numelDimension( data, 0 ) ) {
			ncols = numelDimension( data, 1 );
			buf = getData( data ); // FIFO queue

			// Resize the FIFO queue to hold only enough elements to support the current table size:
			buf.resize( s*ncols );
			sh = [ s, ncols ];

			// Create a new ndarray view, where we assume that the previous view was in row-major order, thus leaving strides the same:
			this._data = new ndarray( getDType( data ), buf, sh, getStrides( data, false ), getOffset( data ), getOrder( data ) ); // eslint-disable-line max-len
		}
		// Otherwise, if we need to grow the internal FIFO queue, wait to do that until new data is pushed to the table...

		this._bufferSize = s;
		if ( !this._quiet ) {
			this.emit( 'change' );
		}
	}
}


// EXPORTS //

module.exports = set;
