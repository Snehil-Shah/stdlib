/**
* @license Apache-2.0
*
* Copyright (c) 2025 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-invalid-this */

'use strict';

// MODULES //

var isStringArray = require( '@stdlib/assert/is-string-array' ).primitives;
var copy = require( '@stdlib/array/base/copy' );
var splitGraphemeClusters = require( '@stdlib/string/split-grapheme-clusters' );
var format = require( '@stdlib/string/format' );
var everyBy2 = require( './../../every_by2.js' );


// VARIABLES //

var NUM_BORDERS = 4;


// FUNCTIONS //

/**
* Predicate function which tests whether two elements are equal.
*
* @private
* @param {Object} v1 - first value
* @param {Object} v2 - second value
* @returns {boolean} boolean indicating whether two elements are equal
*/
function predicate( v1, v2 ) {
	return ( v1.value === v2.value );
}


// MAIN //

/**
* Sets the table border characters in the order `[top, right, bottom, left]`.
*
* @private
* @param {Collection<string>} values - border characters
* @throws {TypeError} must be an array of strings
* @throws {RangeError} must provide four strings
*/
function set( values ) {
	var data;
	var ch;
	var i;
	if ( !isStringArray( values ) ) {
		throw new TypeError( format( 'invalid assignment. `%s` must be an array of strings. Value: `%s`.', 'borders', values ) );
	}
	if ( values.length !== NUM_BORDERS ) {
		throw new RangeError( format( 'invalid assignment. `%s` must have a length of %d. Value: `["%s"]`.', 'borders', NUM_BORDERS, copy( values ).join( '", "' ) ) );
	}
	data = [];
	for ( i = 0; i < NUM_BORDERS; i++ ) {
		ch = splitGraphemeClusters( values[ i ] );
		data.push({
			'value': values[ i ],
			'graphemes': ch,
			'length': ch.length
		});
	}
	if ( !everyBy2( data, this._borders, predicate ) ) {
		this._borders = data;
		if ( !this._quiet ) {
			this.emit( 'change' );
		}
	}
}


// EXPORTS //

module.exports = set;
