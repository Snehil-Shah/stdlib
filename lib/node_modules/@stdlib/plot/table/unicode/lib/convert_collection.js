/**
* @license Apache-2.0
*
* Copyright (c) 2025 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var flatten2d = require( '@stdlib/array/base/flatten2d' );
var shape = require( '@stdlib/array/shape' );
var objectKeys = require( '@stdlib/utils/keys' );
var array2matrix = require( './array2matrix.js' );


// FUNCTIONS //

/**
* Converts table data provided as an array-like object.
*
* @private
* @param {Collection} data - input data
* @param {(ObjectArray|null)} headers - table headers
* @throws {TypeError} invalid input data
* @returns {Object} table data
*/
function convertCollection( data, headers ) {
	var keys;
	var out;
	var flg;
	var obj;
	var sh;
	var d;
	var i;
	var j;
	var k;

	obj = {
		'data': null,
		'headers': null,
		'code': ''
	};

	sh = shape( data );

	// If we were provided a nested array, flatten in row-major order...
	if ( sh.length >= 2 ) {
		sh = [ sh[ 0 ], sh[ 1 ] ]; // only concern ourselves with the first two dimensions
		obj.data = array2matrix( flatten2d( data, sh, false ), sh );
		return obj;
	}
	// If we were provided a one-dimensional array, assume that we were provided a list of objects...

	// If we don't already have headers, infer the headers from the first array element...
	if ( headers === null ) {
		keys = objectKeys( data[ 0 ] );
		flg = true;
	} else {
		keys = headers;
	}
	out = [];
	for ( i = 0; i < sh[ 0 ]; i++ ) {
		d = data[ i ];
		for ( j = 0; j < keys.length; j++ ) {
			k = keys[ j ];
			if ( hasOwnProp( d, k ) ) {
				out.push( d[ k ] );
			} else {
				obj.headers = keys;
				obj.code = 'ERR_MISSING_COLUMNS';
				return obj;
			}
		}
	}
	obj.data = array2matrix( out, [ sh[ 0 ], keys.length ] );
	obj.headers = ( flg ) ? keys : null;
	return obj;
}


// EXPORTS //

module.exports = convertCollection;
