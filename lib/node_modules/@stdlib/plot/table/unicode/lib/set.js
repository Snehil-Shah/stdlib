/**
* @license Apache-2.0
*
* Copyright (c) 2025 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-invalid-this */

'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;
var numelDimension = require( '@stdlib/ndarray/base/numel-dimension' );
var format = require( '@stdlib/string/format' );
var normalizeData = require( './normalize.js' );


// MAIN //

/**
* Sets the data for a specified table cell to a provided value.
*
* @private
* @param {NonNegativeInteger} i - index for the first dimension (i.e., zero-based row number)
* @param {NonNegativeInteger} j - index for the second dimension (i.e., zero-based column number)
* @param {*} value - value to set
* @throws {TypeError} first argument must be a nonnegative integer
* @throws {TypeError} second argument must be a nonnegative integer
* @throws {RangeError} index is out-of-bounds
* @returns {UnicodeTable} table instance
*/
function set( i, j, value ) {
	var nrows;
	var ncols;
	var v;
	if ( !isNonNegativeInteger( i ) ) {
		throw new TypeError( format( 'invalid argument. First argument must be a nonnegative integer. Value: `%s`.', i ) );
	}
	if ( !isNonNegativeInteger( j ) ) {
		throw new TypeError( format( 'invalid argument. Second argument must be a nonnegative integer. Value: `%s`.', j ) );
	}
	nrows = numelDimension( this._data, 0 );
	if ( i >= nrows ) {
		throw new RangeError( format( 'invalid argument. First argument must be on the interval: [0,%u]. Value: `%s`.', nrows-1, i ) );
	}
	ncols = numelDimension( this._data, 1 );
	if ( j >= ncols ) {
		throw new RangeError( format( 'invalid argument. Second argument must be on the interval: [0,%u]. Value: `%s`.', ncols-1, j ) );
	}
	v = normalizeData( [ value ] );
	this._data.set( i, j, v[ 0 ] );
	return this;
}


// EXPORTS //

module.exports = set;
