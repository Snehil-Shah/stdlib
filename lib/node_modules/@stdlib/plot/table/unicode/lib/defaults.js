/**
* @license Apache-2.0
*
* Copyright (c) 2025 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var FLOAT64_MAX = require( '@stdlib/constants/float64/max' );


// MAIN //

/**
* Returns default options.
*
* @private
* @returns {Object} default options
*/
function defaults() {
	var out = {};

	// Cell alignment:
	out.align = [ 'right' ];

	// Boolean indicating whether to automatically re-render on a `change` event:
	out.autoRender = false;

	// Border characters:
	out.borders = [
		{

			'value': '-',
			'graphemes': [ '-' ],
			'width': 1
		},
		{

			'value': '|',
			'graphemes': [ '|' ],
			'width': 1
		},
		{

			'value': '-',
			'graphemes': [ '-' ],
			'width': 1
		},
		{

			'value': '|',
			'graphemes': [ '|' ],
			'width': 1
		}
	];

	// Buffer size:
	out.bufferSize = FLOAT64_MAX;

	// Column separator:
	out.columnSeparator = {
		'value': '|',
		'graphemes': [ '|' ],
		'width': 1
	};

	// Column widths:
	out.columnWidth = null; // by default, automatically size based on content

	// Corner characters:
	out.corners = [
		{

			'value': '┌',
			'graphemes': [ '┌' ],
			'width': 1
		},
		{

			'value': '┐',
			'graphemes': [ '┐' ],
			'width': 1
		},
		{

			'value': '┘',
			'graphemes': [ '┘' ],
			'width': 1
		},
		{

			'value': '└',
			'graphemes': [ '└' ],
			'width': 1
		}
	];

	// Cell format string:
	out.format = [ '%s' ];

	// Header alignment:
	out.headerAlign = null;

	// Column headers:
	out.headers = null;

	// Header separator:
	out.headerSeparator = {
		'value': '-',
		'graphemes': [ '-' ],
		'width': 1
	};

	// Horizontal line separator mode:
	out.horizontalSeparatorMode = 'resume';

	// Joint characters:
	out.joints = [
		{

			'value': '┼',
			'graphemes': [ '┼' ],
			'width': 1
		},
		{

			'value': '┬',
			'graphemes': [ '┬' ],
			'width': 1
		},
		{

			'value': '┤',
			'graphemes': [ '┤' ],
			'width': 1
		},
		{

			'value': '┴',
			'graphemes': [ '┴' ],
			'width': 1
		},
		{

			'value': '├',
			'graphemes': [ '├' ],
			'width': 1
		}
	];

	// Table margins:
	out.margins = [ 0, 0, 0, 0 ];

	// Maximum column width:
	out.maxColumnWidth = [ FLOAT64_MAX ];

	// Maximum table width:
	out.maxWidth = FLOAT64_MAX;

	// Cell padding:
	out.paddingLeft = [ 1 ];
	out.paddingRight = [ 1 ];

	// Row separator:
	out.rowSeparator = {
		'value': '',
		'graphemes': [],
		'width': 0
	};

	// Vertical line separator mode:
	out.verticalSeparatorMode = 'resume';

	return out;
}


// EXPORTS //

module.exports = defaults;
