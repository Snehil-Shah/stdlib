/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var logger = require( 'debug' );
var format = require( '@stdlib/string/format' );
var defineProperty = require( '@stdlib/utils/define-property' );
var objectKeys = require( '@stdlib/utils/keys' );
var isPlainObject = require( '@stdlib/assert/is-plain-object' );
var isCollection = require( '@stdlib/assert/is-collection' );
var mergeFcn = require( '@stdlib/utils/merge' ).factory;
var pick = require( '@stdlib/utils/pick' );
var setAlignment = require( './props/alignment/set.js' );
var getAlignment = require( './props/alignment/get.js' );
var setBorders = require( './props/borders/set.js' );
var getBorders = require( './props/borders/get.js' );
var setCellPadding = require( './props/cell-padding/set.js' );
var getCellPadding = require( './props/cell-padding/get.js' );
var setCorners = require( './props/corners/set.js' );
var getCorners = require( './props/corners/get.js' );
var setColumnSeparator = require( './props/column-separator/set.js' );
var getColumnSeparator = require( './props/column-separator/get.js' );
var setHeaderSeparator = require( './props/header-separator/set.js' );
var getHeaderSeparator = require( './props/header-separator/get.js' );
var setJoints = require( './props/joints/set.js' );
var getJoints = require( './props/joints/get.js' );
var setMarginX = require( './props/margin-x/set.js' );
var getMarginX = require( './props/margin-x/get.js' );
var setMarginY = require( './props/margin-y/set.js' );
var getMarginY = require( './props/margin-y/get.js' );
var setMaxCellWidth = require( './props/max-cell-width/set.js' );
var getMaxCellWidth = require( './props/max-cell-width/get.js' );
var setMaxOutputWidth = require( './props/max-output-width/set.js' );
var getMaxOutputWidth = require( './props/max-output-width/get.js' );
var setRowSeparator = require( './props/row-separator/set.js' );
var getRowSeparator = require( './props/row-separator/get.js' );
var defaults = require( './defaults.js' );
var render = require( './render.js' );
var setData = require('./setdata.js');
var getData = require( './getdata.js' );
var addRow = require( './addrow.js' );


// VARIABLES //

var debug = logger( 'table:unicode:main' );

var merge = mergeFcn({
	'extend': false
});

// List of private properties (note: keep in alphabetical order):
var PRIVATE_PROPS = [
	'_alignment',
	'_borders',
	'_cellPadding',
	'_corners',
	'_columnSeparator',
	'_columnWidths',
	'_data',
	'_headers',
	'_headerSeparator',
	'_joints',
	'_marginX',
	'_marginY',
	'_maxCellWidth',
	'_maxOutputWidth',
	'_rowSeparator'
];

// List of options properties (note: keep in alphabetical order):
var OPTIONS_PROPS = [
	'alignment',
	'borders',
	'cellPadding',
	'columnSeparator',
	'corners',
	'headerSeparator',
	'joints',
	'marginX',
	'marginY',
	'maxCellWidth',
	'maxOutputWidth',
	'rowSeparator'
];


// MAIN //

/**
* Unicode table constructor.
*
* @constructor
* @param {(Object|Array<Object>|Array<Array>|MatrixLike)} [data] - table data
* @param {Collection} [headers] - table headers
* @param {Options} [options] - table options
* @param {string} [options.alignment='right'] - datum's cell alignment
* @param {(string)} [options.borders='─ │ ─ │'] - border characters
* @param {NonNegativeInteger} [options.cellPadding=1] - cell padding
* @param {string} [options.columnSeparator='│'] - column separator character
* @param {string} [options.corners='┌ ┐ ┘ └'] - corner characters
* @param {string} [options.headerSeparator='─'] - header separator character
* @param {string} [options.joints='┼ ┬ ┤ ┴ ├'] - joint characters
* @param {NonNegativeInteger} [options.marginX=0] - horizontal output margin
* @param {NonNegativeInteger} [options.marginY=0] - vertical output margin
* @param {NonNegativeInteger} [options.maxCellWidth=FLOAT64_MAX] - maximum cell width (excluding padding)
* @param {NonNegativeInteger} [options.maxOutputWidth=FLOAT64_MAX] - maximum output width (including margin)
* @param {string} [options.rowSeparator='None'] - row separator character
* @throws {TypeError} must provide valid options
* @returns {UnicodeTable} table instance
*/
function UnicodeTable() {
	var headers;
	var options;
	var nargs;
	var data;
	var opts;
	var keys;
	var key;
	var i;

	nargs = arguments.length;
	if ( !( this instanceof UnicodeTable ) ) {
		if ( nargs === 0 ) {
			return new UnicodeTable();
		}
		if ( nargs === 1 ) {
			return new UnicodeTable( arguments[ 0 ] );
		}
		if ( nargs === 2 ) {
			return new UnicodeTable( arguments[ 0 ], arguments[ 1 ] );
		}
		return new UnicodeTable( arguments[ 0 ], arguments[ 1 ], arguments[ 2 ] ); // eslint-disable-line max-len
	}

	// Extract table-specific options...
	opts = defaults();
	if ( nargs === 0 ) {
		data = null;
		headers = null;
		options = {};
	} else if ( nargs === 1 ) {
		data = arguments[ 0 ];
		headers = null;
		options = {};
	} else if ( nargs === 2 ) {
		if ( isCollection( arguments[ 1 ] ) ) {
			data = arguments[ 0 ];
			headers = arguments[ 1 ];
			options = {};
		} else {
			data = arguments[ 0 ];
			headers = null;
			options = arguments[ 1 ];
			if ( !isPlainObject( options ) ) {
				throw new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );
			}
		}
	} else {
		data = arguments[ 0 ];
		headers = arguments[ 1 ];
		options = arguments[ 2 ];
		if ( !isPlainObject( options ) ) {
			throw new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );
		}
	}
	opts = merge( opts, pick( options, OPTIONS_PROPS ) );

	debug( 'Creating an instance with the following configuration: %s.', JSON.stringify( opts ) );

	// Initialize private table-specific properties...
	for ( i = 0; i < PRIVATE_PROPS.length; i++ ) {
		defineProperty( this, PRIVATE_PROPS[i], {
			'configurable': false,
			'enumerable': false,
			'writable': true,
			'value': null
		});
	}
	// Set table data and headers...
	if ( headers ) {
		this.setData( data, headers );
	} else if ( data ) {
		this.setData( data );
	}
	// Set table-specific properties...
	keys = objectKeys( opts );
	for ( i = 0; i < keys.length; i++ ) {
		key = keys[ i ];
		this[ key ] = opts[ key ];
	}
	return this;
}

/**
* Alignment of datum in cell.
*
* @name alignment
* @memberof UnicodeTable.prototype
* @type {string}
* @throws {TypeError} must be a supported alignment string
* @default 'right'
*
* @example
* var table = new UnicodeTable();
* table.alignment = 'left';
* var alignment = table.alignment;
* // returns 'left'
*/
defineProperty( UnicodeTable.prototype, 'alignment', {
	'configurable': false,
	'enumerable': true,
	'set': setAlignment,
	'get': getAlignment
});

/**
* Border characters.
*
* @name borders
* @memberof UnicodeTable.prototype
* @type {string}
* @throws {TypeError} must be a four space separated characters or 'None'
* @default '─ │ ─ │'
*
* @example
* var table = new UnicodeTable();
* table.borders = '= ! = !';
* var borders = table.borders;
* // returns '= ! = !'
*/
defineProperty( UnicodeTable.prototype, 'borders', {
	'configurable': false,
	'enumerable': true,
	'set': setBorders,
	'get': getBorders
});

/**
* Cell padding.
*
* @name cellPadding
* @memberof UnicodeTable.prototype
* @type {NonNegativeInteger}
* @throws {TypeError} must be a non-negative integer
* @default '1'
*
* @example
* var table = new UnicodeTable();
* table.cellPadding = 3;
* var padding = table.cellPadding;
* // returns 3
*/
defineProperty( UnicodeTable.prototype, 'cellPadding', {
	'configurable': false,
	'enumerable': true,
	'set': setCellPadding,
	'get': getCellPadding
});

/**
* Corner characters.
*
* @name corners
* @memberof UnicodeTable.prototype
* @type {string}
* @throws {TypeError} must be a string with four space separated characters or 'None'
* @default '┌ ┐ ┘ └'
*
* @example
* var table = new UnicodeTable();
* table.corners = '* * * *';
* var corners = table.corners;
* // returns '* * * *'
*/
defineProperty( UnicodeTable.prototype, 'corners', {
	'configurable': false,
	'enumerable': true,
	'set': setCorners,
	'get': getCorners
});

/**
* Column separator character.
*
* @name columnSeparator
* @memberof UnicodeTable.prototype
* @type {string}
* @throws {TypeError} must be a character string or 'None'
* @default '│'
*
* @example
* var table = new UnicodeTable();
* table.columnSeparator = '$';
* var separator = table.columnSeparator;
* // returns '$'
*/
defineProperty( UnicodeTable.prototype, 'columnSeparator', {
	'configurable': false,
	'enumerable': true,
	'set': setColumnSeparator,
	'get': getColumnSeparator
});

/**
* Header separator character.
*
* @name headerSeparator
* @memberof UnicodeTable.prototype
* @type {string}
* @throws {TypeError} must be a character string or 'None'
* @default '─'
*
* @example
* var table = new UnicodeTable();
* table.headerSeparator = '$';
* var separator = table.headerSeparator;
* // returns '$'
*/
defineProperty( UnicodeTable.prototype, 'headerSeparator', {
	'configurable': false,
	'enumerable': true,
	'set': setHeaderSeparator,
	'get': getHeaderSeparator
});

/**
* Joint characters.
*
* @name joints
* @memberof UnicodeTable.prototype
* @type {string}
* @throws {TypeError} must be a string with five space separated characters or 'None'
* @default '┼ ┬ ┤ ┴ ├'
*
* @example
* var table = new UnicodeTable();
* table.joints = '* * * * *';
* var joints = table.joints;
* // returns '* * * * *'
*/
defineProperty( UnicodeTable.prototype, 'joints', {
	'configurable': false,
	'enumerable': true,
	'set': setJoints,
	'get': getJoints
});

/**
* Horizontal output margin.
*
* @name marginX
* @memberof UnicodeTable.prototype
* @type {NonNegativeInteger}
* @throws {TypeError} must be a non-negative integer
* @default '0'
*
* @example
* var table = new UnicodeTable();
* table.marginX = 2;
* var margin = table.marginX;
* // returns 2
*/
defineProperty( UnicodeTable.prototype, 'marginX', {
	'configurable': false,
	'enumerable': true,
	'set': setMarginX,
	'get': getMarginX
});

/**
* Vertical output margin.
*
* @name marginY
* @memberof UnicodeTable.prototype
* @type {NonNegativeInteger}
* @throws {TypeError} must be a non-negative integer
* @default '0'
*
* @example
* var table = new UnicodeTable();
* table.marginY = 2;
* var margin = table.marginY;
* // returns 2
*/
defineProperty( UnicodeTable.prototype, 'marginY', {
	'configurable': false,
	'enumerable': true,
	'set': setMarginY,
	'get': getMarginY
});

/**
* Maximum cell width (excluding padding).
*
* @name maxCellWidth
* @memberof UnicodeTable.prototype
* @type {NonNegativeInteger}
* @throws {TypeError} must be a non-negative integer
* @default 'FLOAT64_MAX'
*
* @example
* var table = new UnicodeTable();
* table.maxCellWidth = 10;
* var width = table.maxCellWidth;
* // returns 10
*/
defineProperty( UnicodeTable.prototype, 'maxCellWidth', {
	'configurable': false,
	'enumerable': true,
	'set': setMaxCellWidth,
	'get': getMaxCellWidth
});

/**
* Maximum output width (including margin).
*
* @name maxOutputWidth
* @memberof UnicodeTable.prototype
* @type {NonNegativeInteger}
* @throws {TypeError} must be a non-negative integer
* @default 'FLOAT64_MAX'
*
* @example
* var table = new UnicodeTable();
* table.maxOutputWidth = 50;
* var width = table.maxOutputWidth;
* // returns 50
*/
defineProperty( UnicodeTable.prototype, 'maxOutputWidth', {
	'configurable': false,
	'enumerable': true,
	'set': setMaxOutputWidth,
	'get': getMaxOutputWidth
});

/**
* Row separator character.
*
* @name rowSeparator
* @memberof UnicodeTable.prototype
* @type {string}
* @throws {TypeError} must be a character string or 'None'
* @default 'None'
*
* @example
* var table = new UnicodeTable();
* table.rowSeparator = '$';
* var separator = table.rowSeparator;
* // returns '$'
*/
defineProperty( UnicodeTable.prototype, 'rowSeparator', {
	'configurable': false,
	'enumerable': true,
	'set': setRowSeparator,
	'get': getRowSeparator
});

/**
* Adds a row to table data.
*
* @name addRow
* @memberof UnicodeTable.prototype
* @type {Function}
* @param {Collection} row - row to add
* @throws {TypeError} must provide a collection with equal number of columns to existing data
* @returns {UnicodeTable} class instance
*/
UnicodeTable.prototype.addRow = addRow;

/**
* Gets table data and headers.
*
* @name getData
* @memberof UnicodeTable.prototype
* @type {Function}
* @returns {Object} table data and headers
*/
UnicodeTable.prototype.getData = getData;

/**
* Renders a table.
*
* @name render
* @memberof UnicodeTable.prototype
* @type {Function}
* @throws {Error} output must be able to accommodate every column individually
* @returns {string} rendered table
*/
UnicodeTable.prototype.render = render;

/**
* Sets table data and headers.
*
* @name setData
* @memberof UnicodeTable.prototype
* @type {Function}
* @param {(Object|Array<Object>|Array<Array>|MatrixLike)} data - table data
* @param {Collection} [headers] - table headers
* @throws {TypeError} first argument must be an object, array of objects, or a 2 dimensional array/ndarray
* @throws {TypeError} second argument must be a collection
* @returns {UnicodeTable} class instance
*/
UnicodeTable.prototype.setData = setData;


// EXPORTS //

module.exports = UnicodeTable;
