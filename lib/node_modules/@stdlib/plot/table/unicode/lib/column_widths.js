/**
* @license Apache-2.0
*
* Copyright (c) 2025 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var zeros = require( '@stdlib/array/base/zeros' );


// MAIN //

/**
* Resolves individual column widths based on table data and specified paddings.
*
* @private
* @param {NonNegativeInteger} nrows - number of table rows
* @param {NonNegativeInteger} ncols - number of table columns
* @param {ndarray} data - table data
* @param {(ndarray|null)} headers - table headers
* @param {NonNegativeIntegerArray} leftPadding - left padding
* @param {NonNegativeIntegerArray} rightPadding - right padding
* @returns {NonNegativeIntegerArray} column widths
*/
function columnWidths( nrows, ncols, data, headers, leftPadding, rightPadding ) { // eslint-disable-line max-len
	var lpad;
	var rpad;
	var out;
	var len;
	var M;
	var N;
	var v;
	var i;
	var j;

	M = leftPadding.length;
	N = rightPadding.length;

	out = zeros( ncols );
	if ( headers ) {
		for ( j = 0; j < ncols; j++ ) {
			lpad = leftPadding[ j%M ];
			rpad = rightPadding[ j%N ];
			v = headers.get( 0, j );
			len = lpad + v.columns + rpad;
			if ( len > out[ j ] ) {
				out[ j ] = len;
			}
		}
	}
	for ( i = 0; i < nrows; i++ ) {
		for ( j = 0; j < ncols; j++ ) {
			lpad = leftPadding[ j%M ];
			rpad = rightPadding[ j%N ];
			v = data.get( i, j );
			len = lpad + v.columns + rpad;
			if ( len > out[ j ] ) {
				out[ j ] = len;
			}
		}
	}
	return out;
}


// EXPORTS //

module.exports = columnWidths;
