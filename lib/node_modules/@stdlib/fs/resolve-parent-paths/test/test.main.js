/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var basename = require( 'path' ).basename;
var tape = require( 'tape' );
var IS_BROWSER = require( '@stdlib/assert/is-browser' );
var contains = require( '@stdlib/assert/contains' );
var noop = require( '@stdlib/utils/noop' );
var cwd = require( '@stdlib/process/cwd' );
var resolveParentPaths = require( './../lib/main.js' );


// VARIABLES //

// Don't run tests in the browser...for now...
var opts = {
	'skip': IS_BROWSER // FIXME
};


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof resolveParentPaths, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if provided a `paths` argument which is not an array of strings', function test( t ) {
	var values;
	var i;

	values = [
		5,
		NaN,
		null,
		void 0,
		true,
		{},
		function noop() {},
		'beep',
		[ 1, 2 ]
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			resolveParentPaths( value, noop );
		};
	}
});

tape( 'the function throws an error if provided a `paths` argument which is not an array of strings (options)', function test( t ) {
	var values;
	var i;

	values = [
		5,
		NaN,
		null,
		void 0,
		true,
		{},
		function noop() {},
		'beep',
		[ 1, 2 ]
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			resolveParentPaths( value, {}, noop );
		};
	}
});

tape( 'the function throws an error if provided a callback argument which is not a function', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		null,
		void 0,
		true,
		[],
		{}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			resolveParentPaths( [ 'beep' ], value );
		};
	}
});

tape( 'the function throws an error if provided a callback argument which is not a function (options)', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		null,
		void 0,
		true,
		[],
		{}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			resolveParentPaths( [ 'beep' ], {}, value );
		};
	}
});

tape( 'the function throws an error if provided an options argument which is not an object', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		null,
		void 0,
		true,
		[],
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			resolveParentPaths( [ 'beep' ], value, noop );
		};
	}
});

tape( 'the function throws an error if provided an invalid option', function test( t ) {
	var values;
	var i;

	values = [
		5,
		NaN,
		null,
		void 0,
		true,
		[],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			resolveParentPaths( [ 'beep' ], {
				'dir': value
			}, noop );
		};
	}
});

tape( 'the function resolves paths from a set of paths by walking parent directories', opts, function test( t ) {
	var expected;
	var base;
	var dir;

	dir = cwd();
	base = basename( dir );

	expected = dir;
	resolveParentPaths( [ base ], opts, onPaths );

	function onPaths( error, actual ) {
		if ( error ) {
			t.ok( false, error.message );
		}
		t.strictEqual( actual.length, 1, 'returns expected number of paths' );
		t.strictEqual( actual[ 0 ], expected, 'returns path' );
		t.end();
	}
});

tape( 'the function resolves a path from a set of paths by walking parent directories (dir option)', opts, function test( t ) {
	var expected;
	var opts;

	opts = {
		'dir': __dirname
	};
	expected = resolve( __dirname, '../package.json' );

	resolveParentPaths( [ 'package.json' ], opts, onPaths );

	function onPaths( error, actual ) {
		if ( error ) {
			t.ok( false, error.message );
		}
		t.strictEqual( actual.length, 1, 'returns expected number of paths' );
		t.strictEqual( actual[ 0 ], expected, 'returns path' );
		t.end();
	}
});

tape( 'the function resolves the first path match from a set of paths by walking parent directories (`first` mode)', opts, function test( t ) {
	var dir;
	var FLG;

	FLG = 0;
	opts = {
		'dir': __dirname,
		'mode': 'first'
	};
	dir = resolve( __dirname, '../package.json' );

	resolveParentPaths( [ 'package.json' ], opts, onPaths );
	resolveParentPaths( [ 'beep-boop!!!helloWorld!?!', 'package.json' ], opts, onPaths );
	resolveParentPaths( [ 'package.json', 'README.md' ], opts, onPaths );

	function onPaths( error, actual ) {
		if ( error ) {
			t.ok( false, error.message );
		}
		t.strictEqual( actual.length, 1, 'returns expected number of paths' );
		t.strictEqual( actual[ 0 ], dir, 'returns path' );

		FLG += 1;
		if ( FLG === 3 ) {
			t.end();
		}
	}
});

tape( 'the function resolves one or more paths from a set of paths at a directory level by walking parent directories (`some` mode)', opts, function test( t ) {
	var dir1;
	var dir2;
	var FLG;

	FLG = 0;
	opts = {
		'dir': __dirname,
		'mode': 'some'
	};
	dir1 = resolve( __dirname, '../package.json' );
	dir2 = resolve( __dirname, '../README.md' );

	resolveParentPaths( [ 'package.json' ], opts, onPaths1 );
	resolveParentPaths( [ 'beep-boop!!!helloWorld!?!', 'package.json' ], opts, onPaths1 );
	resolveParentPaths( [ 'package.json', 'README.md' ], opts, onPaths2 );

	function onPaths1( error, actual ) {
		if ( error ) {
			t.ok( false, error.message );
		}
		t.strictEqual( actual.length, 1, 'returns expected number of paths' );
		t.strictEqual( actual[ 0 ], dir1, 'returns path' );

		FLG += 1;
		if ( FLG === 3 ) {
			t.end();
		}
	}

	function onPaths2( error, actual ) {
		if ( error ) {
			t.ok( false, error.message );
		}
		t.strictEqual( actual.length, 2, 'returns expected number of paths' );
		t.strictEqual( contains( actual, dir1 ), true, 'returns path' );
		t.strictEqual( contains( actual, dir2 ), true, 'returns path' );

		FLG += 1;
		if ( FLG === 3 ) {
			t.end();
		}
	}
});

tape( 'the function resolves all paths from a set of paths at a directory level by walking parent directories (`all` mode)', opts, function test( t ) {
	var dir1;
	var dir2;
	var FLG;

	FLG = 0;
	opts = {
		'dir': __dirname,
		'mode': 'all'
	};
	dir1 = resolve( __dirname, '../package.json' );
	dir2 = resolve( __dirname, '../README.md' );

	resolveParentPaths( [ 'beep-boop!!!helloWorld!?!', 'package.json' ], opts, onPathsNegative );
	resolveParentPaths( [ 'package.json', 'README.md' ], opts, onPathsPositive );

	function onPathsNegative( error, actual ) {
		if ( error ) {
			t.ok( false, error.message );
		}
		t.strictEqual( actual.length, 0, 'returns expected number of paths' );

		FLG += 1;
		if ( FLG === 2 ) {
			t.end();
		}
	}

	function onPathsPositive( error, actual ) {
		if ( error ) {
			t.ok( false, error.message );
		}
		t.strictEqual( actual.length, 2, 'returns expected number of paths' );
		t.strictEqual( actual[ 0 ], dir1, 'returns path' );
		t.strictEqual( actual[ 1 ], dir2, 'returns path' );

		FLG += 1;
		if ( FLG === 2 ) {
			t.end();
		}
	}
});

tape( 'the function resolves each path from a set of paths by walking parent directories (`each` mode)', opts, function test( t ) {
	var dir1;
	var dir2;
	var FLG;

	FLG = 0;
	opts = {
		'dir': __dirname,
		'mode': 'each'
	};
	dir1 = resolve( __dirname, '../package.json' );
	dir2 = resolve( __dirname, '../../resolve-parent-paths' );

	resolveParentPaths( [ 'beep-boop!!!helloWorld!?!', 'package.json' ], opts, onPathsNegative );
	resolveParentPaths( [ 'package.json', 'resolve-parent-paths' ], opts, onPathsPositive );

	function onPathsNegative( error, actual ) {
		if ( error ) {
			t.ok( false, error.message );
		}
		t.strictEqual( actual.length, 2, 'returns expected number of paths' );
		t.strictEqual( actual[ 0 ], null, 'returns expected value' );
		t.strictEqual( actual[ 1 ], dir1, 'returns path' );

		FLG += 1;
		if ( FLG === 2 ) {
			t.end();
		}
	}

	function onPathsPositive( error, actual ) {
		if ( error ) {
			t.ok( false, error.message );
		}
		t.strictEqual( actual.length, 2, 'returns expected number of paths' );
		t.strictEqual( actual[ 0 ], dir1, 'returns path' );
		t.strictEqual( actual[ 1 ], dir2, 'returns path' );

		FLG += 1;
		if ( FLG === 2 ) {
			t.end();
		}
	}
});

tape( 'the function returns an empty array if unable to resolve a parent path (`first` mode)', opts, function test( t ) {
	var opts;

	opts = {
		'mode': 'first'
	};
	resolveParentPaths( [ 'beep-boop!!!hello world!?!' ], opts, onPaths );
	t.end();

	function onPaths( error, actual ) {
		if ( error ) {
			t.ok( false, error.message );
		}
		t.strictEqual( actual.length, 0, 'returns empty array' );
	}
});

tape( 'the function returns an empty array if unable to resolve a parent path (`some` mode)', opts, function test( t ) {
	var opts;

	opts = {
		'mode': 'some'
	};
	resolveParentPaths( [ 'beep-boop!!!hello world!?!' ], opts, onPaths );
	t.end();

	function onPaths( error, actual ) {
		if ( error ) {
			t.ok( false, error.message );
		}
		t.strictEqual( actual.length, 0, 'returns empty array' );
	}
});

tape( 'the function returns an empty array if unable to resolve a parent path (`all` mode)', opts, function test( t ) {
	var opts;

	opts = {
		'mode': 'all'
	};
	resolveParentPaths( [ 'beep-boop!!!hello world!?!' ], opts, onPaths );
	t.end();

	function onPaths( error, actual ) {
		if ( error ) {
			t.ok( false, error.message );
		}
		t.strictEqual( actual.length, 0, 'returns empty array' );
	}
});

tape( 'the function returns a `null` array if unable to resolve a parent path (`each` mode)', opts, function test( t ) {
	var opts;

	opts = {
		'mode': 'each'
	};
	resolveParentPaths( [ 'beep-boop!!!hello world!?!' ], opts, onPaths );
	t.end();

	function onPaths( error, actual ) {
		if ( error ) {
			t.ok( false, error.message );
		}
		t.strictEqual( actual.length, 1, 'returns expected array' );
		t.strictEqual( actual[ 0 ], null, 'returns expected value' );
	}
});

tape( 'the function returns an empty array if unable to resolve a parent path (options)', opts, function test( t ) {
	var opts = {
		'dir': __dirname
	};
	resolveParentPaths( [ 'beep-boop!!!hello world!?!' ], opts, onPath );
	t.end();

	function onPath( error, actual ) {
		if ( error ) {
			t.ok( false, error.message );
		}
		t.strictEqual( actual.length, 0, 'returns empty array' );
	}
});
