/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var isStringArray = require( '@stdlib/assert/is-string-array' ).primitives;
var isFunction = require( '@stdlib/assert/is-function' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var cwd = require( '@stdlib/process/cwd' );
var exists = require( '@stdlib/fs/exists' );
var format = require( '@stdlib/string/format' );
var validate = require( './validate.js' );


// VARIABLES //

var MODES = {
	'first': first,
	'some': some,
	'all': all,
	'each': each
};


// FUNCTIONS //

/**
* Asynchronously resolves any first path from a set of paths by walking parent directories.
*
* @private
* @param {Array<string>} paths - paths to resolve from
* @param {string} dir - base directory
* @param {Callback} done - callback to invoke after resolving paths
* @returns {void}
*/
function first( paths, dir, done ) {
	var child;
	var spath;
	var out = [];
	var i;

	// Start at a base directory and continue moving up through each parent directory...
	for ( i = 0; i < paths.length - 1; i++ ) {
		spath = resolve( dir, paths[ i ] );
		if ( exists.sync( spath ) ) {
			out.push( spath );
			return done( null, out );
		}
	}
	spath = resolve( dir, paths[ paths.length - 1 ] );
	exists( spath, onExists );

	/**
	* Callback invoked after checking for path existence.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {boolean} bool - boolean indicating if a path exists
	* @returns {void}
	*/
	function onExists( error, bool ) { // eslint-disable-line node/handle-callback-err
		var j;
		if ( bool ) {
			out.push( spath );
			return done( null, out );
		}
		// Resolve a parent directory:
		child = dir;
		dir = resolve( dir, '..' );

		// If we have already reached root, we cannot resolve any higher directories...
		if ( child === dir ) {
			return done( null, out );
		}
		for ( j = 0; j < paths.length - 1; j++ ) {
			spath = resolve( dir, paths[ j ] );
			if ( exists.sync( spath ) ) {
				out.push( spath );
				return done( null, out );
			}
		}
		// Resolve paths at next directory level:
		spath = resolve( dir, paths[ paths.length - 1 ] );
		exists( spath, onExists );
	}
}

/**
* Asynchronously resolves some paths from a set of paths at a directory level by walking parent directories.
*
* @private
* @param {Array<string>} paths - paths to resolve from
* @param {string} dir - base directory
* @param {Callback} done - callback to invoke after resolving paths
* @returns {void}
*/
function some( paths, dir, done ) {
	var child;
	var spath;
	var out = [];
	var i;

	// Start at a base directory and continue moving up through each parent directory...
	for ( i = 0; i < paths.length - 1; i++ ) {
		spath = resolve( dir, paths[ i ] );
		if ( exists.sync( spath ) ) {
			out.push( spath );
		}
	}
	spath = resolve( dir, paths[ paths.length - 1 ] );
	exists( spath, onExists );

	/**
	* Callback invoked after checking for path existence.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {boolean} bool - boolean indicating if a path exists
	* @returns {void}
	*/
	function onExists( error, bool ) { // eslint-disable-line node/handle-callback-err
		var j;
		if ( bool ) {
			out.push( spath );
		}
		// Check if we have resolved any path...
		if ( out.length > 0 ) {
			return done( null, out );
		}
		// Resolve a parent directory:
		child = dir;
		dir = resolve( dir, '..' );

		// If we have already reached root, we cannot resolve any higher directories...
		if ( child === dir ) {
			return done( null, out );
		}
		for ( j = 0; j < paths.length - 1; j++ ) {
			spath = resolve( dir, paths[ j ] );
			if ( exists.sync( spath ) ) {
				out.push( spath );
			}
		}
		// Resolve paths at next directory level:
		spath = resolve( dir, paths[ paths.length - 1 ] );
		exists( spath, onExists );
	}
}

/**
* Asynchronously resolves all paths from a set of paths at a directory level by walking parent directories.
*
* @private
* @param {Array<string>} paths - paths to resolve from
* @param {string} dir - base directory
* @param {Callback} done - callback to invoke after resolving paths
* @returns {void}
*/
function all( paths, dir, done ) {
	var child;
	var spath;
	var out = [];
	var i;

	// Start at a base directory and continue moving up through each parent directory...
	for ( i = 0; i < paths.length - 1; i++ ) {
		spath = resolve( dir, paths[ i ] );
		if ( exists.sync( spath ) ) {
			out.push( spath );
		}
	}
	spath = resolve( dir, paths[ paths.length - 1 ] );
	exists( spath, onExists );

	/**
	* Callback invoked after checking for path existence.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {boolean} bool - boolean indicating if a path exists
	* @returns {void}
	*/
	function onExists( error, bool ) { // eslint-disable-line node/handle-callback-err
		var j;
		if ( bool ) {
			out.push( spath );
		}
		// Check if we have resolved all paths...
		if ( out.length === paths.length ) {
			return done( null, out );
		}
		// Resolve a parent directory:
		out = [];
		child = dir;
		dir = resolve( dir, '..' );

		// If we have already reached root, we cannot resolve any higher directories...
		if ( child === dir ) {
			return done( null, out );
		}
		for ( j = 0; j < paths.length - 1; j++ ) {
			spath = resolve( dir, paths[ j ] );
			if ( exists.sync( spath ) ) {
				out.push( spath );
			}
		}
		// Resolve paths at next directory level:
		spath = resolve( dir, paths[ paths.length - 1 ] );
		exists( spath, onExists );
	}
}

/**
* Asynchronously resolves each path from a set of paths by walking parent directories.
*
* @private
* @param {Array<string>} paths - paths to resolve from
* @param {string} dir - base directory
* @param {Callback} done - callback to invoke after resolving paths
* @returns {void}
*/
function each( paths, dir, done ) {
	var resolved = {};
	var count = 0;
	var child;
	var spath;
	var out = [];
	var i;

	// Start at a base directory and continue moving up through each parent directory...
	for ( i = 0; i < paths.length - 1; i++ ) {
		spath = resolve( dir, paths[ i ] );
		if ( exists.sync( spath ) && !hasOwnProp( resolved, i ) ) {
			resolved[ i ] = spath;
			count += 1;
		}
	}
	spath = resolve( dir, paths[ paths.length - 1 ] );
	exists( spath, onExists );

	/**
	* Callback invoked after checking for path existence.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {boolean} bool - boolean indicating if a path exists
	* @returns {void}
	*/
	function onExists( error, bool ) { // eslint-disable-line node/handle-callback-err
		var j;
		if ( bool && !hasOwnProp( resolved, paths.length - 1 ) ) {
			resolved[ paths.length - 1 ] = spath;
			count += 1;
		}
		// Check if we have resolved all paths...
		if ( count === paths.length ) {
			for ( j = 0; j < paths.length; j++ ) {
				out.push( resolved[ j ] );
			}
			return done( null, out );
		}
		// Resolve a parent directory:
		child = dir;
		dir = resolve( dir, '..' );

		// If we have already reached root, we cannot resolve any higher directories...
		if ( child === dir ) {
			for ( j = 0; j < paths.length; j++ ) {
				if ( hasOwnProp( resolved, j ) ) {
					out.push( resolved[ j ] );
					continue;
				}
				out.push( null );
			}
			return done( null, out );
		}
		for ( j = 0; j < paths.length - 1; j++ ) {
			spath = resolve( dir, paths[ j ] );
			if ( exists.sync( spath ) && !hasOwnProp( resolved, j ) ) {
				resolved[ j ] = spath;
				count += 1;
			}
		}
		// Resolve paths at next directory level:
		spath = resolve( dir, paths[ paths.length - 1 ] );
		exists( spath, onExists );
	}
}


// MAIN //

/**
* Asynchronously resolves paths from a set of paths by walking parent directories.
*
* @param {Array<string>} paths - paths to resolve from
* @param {Options} [options] - function options
* @param {string} [options.dir] - base directory
* @param {string} [options.mode] - mode of operation
* @param {Callback} clbk - callback to invoke after resolving paths
* @throws {TypeError} first argument must be an array of strings
* @throws {TypeError} callback argument must be a function
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {void}
*
* @example
* resolveParentPaths( [ 'package.json', 'package-lock.json' ], onPaths );
*
* function onPaths( error, paths ) {
*     if ( error ) {
*         throw error;
*     }
*     console.log( paths );
* }
*/
function resolveParentPaths( paths, options, clbk ) {
	var opts;
	var done;
	var mode;
	var dir;
	var fcn;
	var err;
	if ( !isStringArray( paths ) ) {
		throw new TypeError( format( 'invalid argument. First argument must be an array of strings. Value: `%s`.', paths ) );
	}
	opts = {};
	if ( arguments.length > 2 ) {
		done = clbk;
		err = validate( opts, options );
		if ( err ) {
			throw err;
		}
	} else {
		done = options;
	}
	if ( !isFunction( done ) ) {
		throw new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', done ) );
	}
	if ( opts.dir ) {
		dir = resolve( cwd(), opts.dir );
	} else {
		dir = cwd();
	}
	mode = opts.mode || 'all';

	fcn = MODES[ mode ];
	fcn( paths, dir, done );
}


// EXPORTS //

module.exports = resolveParentPaths;
